@page "/settings/ticketcategory"
@inject ISnackbar Snackbar
@inject ITicketCategoryService ticketCategoryService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudContainer class='ticketCategoryContainer' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if (!dataFetched)
    {
        <MudPaper Class='ma-4 pa-2'>
            <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
            <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='75vh' Animation='Animation.Wave' />
            <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </MudOverlay>
        </MudPaper>
    }
    else
    {
        <MudTable Class='ma-4 pa-2' Items='@ticketCategoryList' Hover='true' Filter='new Func<TicketCategoryModel,bool>(FilterItems)'
        FixedHeader='true' FixedFooter='true' RowsPerPage='20' Striped='true' Breakpoint='Breakpoint.Sm'
        Bordered='false' Dense='true' LoadingProgressColor='Color.Info'>
            <ToolBarContent>
                <MudContainer>
                    <MudTextField @bind-Value='searchTerm' Placeholder='Search' Adornment='Adornment.Start'
                    AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Medium' Class='mt-0' Clearable='true'>
                    </MudTextField>
                </MudContainer>
                <MudSpacer />
                <MudMenu Label='More' StartIcon="@Icons.Material.Filled.MoreVert" Direction='Direction.End' Dense='true'
                OffsetY='true'>
                    <MudMenuItem @onclick='@(() => AddTicketCategory())'>
                        <p style='display: flex;'>
                            <MudIcon Icon='@Icons.Material.Filled.Add' />
                            <MudText style='padding-left: 10px; font-size: 14px; align-self: center;'>Add Category</MudText>
                        </p>
                    </MudMenuItem>
                </MudMenu>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel InitialDirection='SortDirection.None'
                    SortBy='new Func<TicketCategoryModel, object>(x=>x.CategoryTypeId)'>
                        Category Type
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection='SortDirection.Ascending'
                    SortBy='new Func<TicketCategoryModel, object>(x=>x.CategoryName)'>
                        Ticket Category
                    </MudTableSortLabel>
                </MudTh>
                <MudTh class='tableActive'>Active</MudTh>
                <MudTh class='tableActions'>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel='CategoryType'>
                    @if (context.CategoryTypeId == Enums.TicketCategoryType.Hardware)
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.Computer' Title='Hardware' />
                        @context.CategoryTypeId
                    </MudText>
                    }
                @if (context.CategoryTypeId == Enums.TicketCategoryType.Software)
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.Wysiwyg' Title='Software' />
                        @context.CategoryTypeId
                    </MudText>
                    }
                @if (context.CategoryTypeId == Enums.TicketCategoryType.Admin)
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.SupervisorAccount' Title='Software' />
                        @context.CategoryTypeId
                    </MudText>
                    }
            </MudTd>
            <MudTd DataLabel='CategoryName'>@context.CategoryName</MudTd>
            <MudTd DataLabel='IsActive'>
                <MudCheckBox @bind-Checked='@context.IsActive' Dense='true' ReadOnly='true' />
            </MudTd>
            <MudTd DataLabel='Actions'>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Direction='Direction.End' Dense='true'
                    Size='Size.Small'>
                    <MudMenuItem @onclick='@(() => EditTicketCategory(context))'>
                        <p style='display: flex;'>
                            <MudIcon Icon='@Icons.Material.Filled.Edit' />
                            <MudText style='padding-left: 10px; font-size: 14px;'>Modify Category</MudText>
                        </p>
                    </MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions='new int[]{20,40}' />
        </PagerContent>
    </MudTable>
    }
</MudContainer>

@code {
    @* private bool _hidePosition; *@
    @* private bool _loading; *@
    private bool isVisible;
    private bool dataFetched;
    private string searchTerm = "";
    private IEnumerable<TicketCategoryModel> ticketCategoryList = new List<TicketCategoryModel>();
    Enums.TicketCategoryType categoryType;
    protected override async Task OnInitializedAsync()
    {
        GlobalContentTitle.contentTitle = "Ticket Category";
        while (GlobalClass.CurrentUserAccount == null) {
            await Task.Delay(1);
        }
        isVisible = true;
        Task t = Task.WhenAll(LoadTicketCategory());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
        {
            CompletedFetch();
        }
    }
    async Task LoadTicketCategory()
    {
        ticketCategoryList = await ticketCategoryService.LoadTicketCategory(await localStorage.GetItemAsync<string>("token"));
    }

    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }

    private async Task AddTicketCategory()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Add Category");
        parameters.Add("ButtonText", "Add");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        var resultDialog = await DialogService.Show<Shared.Dialogs.TicketCategoryDialog>("Add Ticket", parameters,
        options).Result;
        if (!resultDialog.Cancelled)
        {
            string thisPage = "ticketCategory";
            NavigationManager.NavigateTo($"/refresh/{thisPage}");
        }
    }

    private async Task EditTicketCategory(TicketCategoryModel currTicketCategory)
    {

        @if (GlobalClass.CurrentUserAccount.AccessLevel == Enums.AccessLevel.Administrator)
        {
            var parameters = new DialogParameters { ["currTicketCategory"] = currTicketCategory };
            parameters.Add("ContentText", "Modify Category");
            parameters.Add("ButtonText", "Update");
            parameters.Add("Color", Color.Success);

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

            var resultDialog = await DialogService.Show<Shared.Dialogs.TicketCategoryDialog>("Update Category", parameters,
            options).Result;
        }
        else
        {
            ShowAlert("Access is denied, Please ask Administrator for assistance! ", Variant.Filled, Severity.Error);
        }
    }

    private bool FilterItems(TicketCategoryModel items)
    {
        if (items.CategoryName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        else if(items.CategoryTypeId.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private void ShowAlert(string message, Variant variant, Severity severity)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.SnackbarVariant = variant;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($"{message}", severity);
    }
}