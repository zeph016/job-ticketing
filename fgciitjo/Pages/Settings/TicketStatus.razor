@page "/settings/ticketstatus"

@inject ITicketStatusService ticketService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar;


<MudContainer class='ticketStatusContainer' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if (!dataFetched)
    {
        <MudPaper Class='ma-4 pa-2'>
            <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
            <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='75vh' Animation='Animation.Wave' />
            <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </MudOverlay>
        </MudPaper>
    }
    else
    {
        <MudTable Class='ma-4 pa-2' Items='@ticketStatusList' Hover="true" Filter='new Func<TicketStatusModel,bool>(FilterItems)'
        FixedHeader='true' FixedFooter='true' RowsPerPage='20' Striped='true' Breakpoint="Breakpoint.Sm"
        Bordered='false' Dense='true' LoadingProgressColor="Color.Info">
            <ToolBarContent>
                <MudContainer>
                    <MudTextField @bind-Value='searchTerm' Placeholder='Search' Class='mt-0'
                    Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                    Clearable='true'>
                    </MudTextField>
                </MudContainer>
                <MudSpacer />
                <MudMenu Label='More' StartIcon="@Icons.Material.Filled.MoreVert" Direction='Direction.End' Dense='true'
                OffsetY='true'>
                    <MudMenuItem @onclick='@(() => AddTicketStatus())'>
                        <p style='display: flex;'>
                            <MudIcon Icon='@Icons.Material.Filled.Add' />
                            <MudText style='padding-left: 10px; font-size: 14px; align-self: center;'>Add Status</MudText>
                        </p>
                    </MudMenuItem>
                </MudMenu>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel InitialDirection='SortDirection.Ascending'
                    SortBy='new Func<TicketStatusModel, object>(x=>x.StatusName)'>
                        Ticket Status
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>Status Color</MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection='SortDirection.Ascending'
                    SortBy='new Func<TicketStatusModel, object>(x=>Extensions.GetEnumDescription(x.StatusTypeId))'>
                        Status Type
                    </MudTableSortLabel>
                </MudTh>
                <MudTh class='tableActive'>Active</MudTh>
                <MudTh class='tableActions'>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel='StatusName'>
                    @if (context.StatusName.Contains("Assigned"))
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.AssignmentInd' Title='Assigned' />
                        @context.StatusName
                    </MudText>
                    }
                @if (context.StatusName.Contains("Cancelled"))
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.Cancel' Title='Cancelled' />
                        @context.StatusName
                    </MudText>
                    }
                @if (context.StatusName.Contains("Done"))
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.DoneAll' Title='Done' />
                        @context.StatusName
                    </MudText>
                    }
                @if (context.StatusName.Contains("For Assignment"))
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.AssignmentReturned' Title='For Assignment' />
                        @context.StatusName
                    </MudText>
                    }
                @if (context.StatusName.Contains("For IT Approval"))
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.Approval' Title='Approval' />
                        @context.StatusName
                    </MudText>
                    }
                @if (context.StatusName.Contains("In Progress"))
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.Moving' Title='In Progress' />
                        @context.StatusName
                    </MudText>
                    }
                @if (context.StatusName.Contains("Pending"))
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.PendingActions' Title='Pending' />
                        @context.StatusName
                    </MudText>
                    }
                @if (!context.StatusName.Contains("Assigned") &&
                !context.StatusName.Contains("Cancelled") &&
                !context.StatusName.Contains("Done") &&
                !context.StatusName.Contains("For Assignment") &&
                !context.StatusName.Contains("For IT Approval") &&
                !context.StatusName.Contains("In Progress") &&
                !context.StatusName.Contains("Pending"))
                    {
                    <MudText class='tableRowWithIcon'>
                        <MudIcon Icon='@Icons.Material.Filled.Feed' Title='Feed' />
                        @context.StatusName
                    </MudText>
                    }

            </MudTd>
            <MudTd DataLabel='StatusColor'>
                @if (context.StatusColor != null)
                    {
                    <div class='smallColorBox' style='@($"background-color:{context.StatusColor};")'>
                    </div>
                    }
            </MudTd>
            <MudTd DataLabel='StatusTypeId'>
                @Extensions.GetEnumDescription((Enums.TicketStatusType)@context.StatusTypeId)
            </MudTd>
            <MudTd DataLabel='IsActive'>
                <MudCheckBox @bind-Checked='@context.IsActive' Dense='true' ReadOnly='true' />
            </MudTd>
            <MudTd DataLabel='Actions'>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Direction='Direction.End' Dense='true'
                    Size='Size.Small'>
                    <MudMenuItem @onclick='@(() => EditTicketStatus(context))'>
                        <p style='display: flex;'>
                            <MudIcon Icon='@Icons.Material.Filled.Edit' />
                            <MudText style='padding-left: 10px; font-size: 14px; align-self: center;'>Modify Status
                            </MudText>
                        </p>
                    </MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions='new int[]{20,40}' />
        </PagerContent>
    </MudTable>
    }
</MudContainer>

@code {
    @* private bool _hidePosition; *@
    @* private bool _loading; *@
    private bool isVisible;
    private bool dataFetched;
    private string searchTerm = "";
    List<TicketStatusModel> ticketStatusList = new List<TicketStatusModel>();

    protected override async Task OnInitializedAsync()
    {
        GlobalContentTitle.contentTitle = "Ticket Status";
        while (GlobalClass.CurrentUserAccount == null) {
            await Task.Delay(1);
        }
        isVisible = true;
        Task t = Task.WhenAll(LoadTicketStatus());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
        {
            CompletedFetch();
        }
    }

    async Task LoadTicketStatus()
    {
        var filterParameter = new FilterParameter();
        ticketStatusList = await ticketService.GetTicketStatus(filterParameter, await
        localStorage.GetItemAsync<string>("token"));
    }

    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }

    //NOT IN USE REFERENCE ONLY
    void Add()
    {
        NavigationManager.NavigateTo($"/settings/ticket/add");
    }

    void Edit(long Id)
    {
        NavigationManager.NavigateTo($"/settings/ticket/{Id}");
    }
    //
    
    private async Task AddTicketStatus()
    {
       if (GlobalClass.CurrentUserAccount.AccessLevel == Enums.AccessLevel.Administrator)
      {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Add Status");
        parameters.Add("ButtonText", "ADD");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        var resultDialog = await DialogService.Show<Shared.Dialogs.TicketStatusDialog>("Add Ticket", parameters,
        options).Result;
        if (!resultDialog.Cancelled)
        {
            string thisPage = "ticketstatus";
            NavigationManager.NavigateTo($"/refresh/{thisPage}");
        }
      }
      else
      {
        ShowAlert("Access is denied, Please ask Administrator for assistance! ", Variant.Filled, Severity.Error);
      }
    }

    private async Task EditTicketStatus(TicketStatusModel currTicketStatus)
    {
       if (GlobalClass.CurrentUserAccount.AccessLevel == Enums.AccessLevel.Administrator)
      {
        var parameters = new DialogParameters { ["currTicketStatus"] = currTicketStatus };
        parameters.Add("ContentText", "Modify Status");
        parameters.Add("ButtonText", "UPDATE");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        var resultDialog = await DialogService.Show<Shared.Dialogs.TicketStatusDialog>("Update Ticket", parameters,
        options).Result;

        if (!resultDialog.Cancelled)
        {
            @* string thisPage = "ticketStatus";
                NavigationManager.NavigateTo($"/refresh/{thisPage}"); *@
        }
      }
      else
      {
        ShowAlert("Access is denied, Please ask Administrator for assistance! ", Variant.Filled, Severity.Error);
      }
    }
    void ShowAlert(string message, Variant variant, Severity severity)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.SnackbarVariant = variant;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($"{message}", severity);
    }

    private bool FilterItems(TicketStatusModel items)
    {
        if (items.StatusName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Extensions.GetEnumDescription(items.StatusTypeId).Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}