@page "/settings/useraccounts"

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IEmployeeAccountService EmployeeAccountService //SAMPLE
@inject ITicketUserAccountService ticketUserAccountService

<div class='page-cont'>
   <MudPaper Class='page-cont__background' Square Elevation='0'>
        @if (!dataFetched)
        {
            <SkeletonDefaultList />
        }
        else
        {
            <MudContainer Class='pa-2' Fixed MaxWidth='MaxWidth.ExtraExtraLarge'>
                <MudTable Class='table-sm-type' Items='@ticketUserAccounts' Hover Filter='new Func<TicketUserAccount,bool>(FilterItems)'
                    FixedHeader FixedFooter RowsPerPage='20' Bordered Dense Breakpoint="Breakpoint.Sm"  LoadingProgressColor="Color.Primary"
                    Height='calc(100vh - 185px)' >
                    <ToolBarContent>
                        <MudContainer>
                            <MudTextField @bind-Value='searchTerm' Placeholder='Search' Adornment='Adornment.Start' 
                                AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Medium' Class='mt-0' Clearable='true'>
                            </MudTextField>
                        </MudContainer>
                        <MudSpacer/>
                    </ToolBarContent>
                    <ColGroup>
                        <col style="width:25%;"/>
                        <col />
                        <col />
                        <col />
                        <col />
                        <col style='width:30px'/>
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel InitialDirection='SortDirection.Ascending' SortBy='new Func<TicketUserAccount, object>(x=>x.EmployeeName)'>
                                Name
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>Department</MudTh>
                        <MudTh>Designation</MudTh>
                        <MudTh>Email Address</MudTh>
                        <MudTh>Phone Number</MudTh>
                        <MudTh Class='tableActions'>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel='EmployeeName'>
                            <div class='d-flex align-center gap-2'>
                                <MudIcon Icon='@Icons.Material.Filled.Person' Title='Person' />
                                <small>@context.EmployeeName</small>
                            </div>
                        </MudTd>
                        <MudTd DataLabel='Department'>
                            <small>@context.Department</small>
                        </MudTd>
                        <MudTd DataLabel='Designation'>
                            <small>@context.Designation</small>
                        </MudTd>
                        <MudTd DataLabel='EmailAddress'>
                            <small>@context.EmailAddress</small>
                        </MudTd>
                        <MudTd DataLabel='ContactInfo'>
                            <small>@context.ContactInfo</small>
                        </MudTd>
                        <MudTd Class='text-center' DataLabel='Actions'>
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Direction='Direction.End' Dense='true' Size='Size.Small'>
                                <MudMenuItem @onclick='@(() => Edit(context.HubUserAccountId))'>
                                    <p style='display: flex;'>
                                        <MudIcon Icon='@Icons.Material.Filled.Edit'/>
                                        <MudText style='padding-left: 10px; font-size: 14px;'>Edit Account</MudText>
                                    </p>
                                </MudMenuItem>
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions='new int[]{20,40}'/>
                    </PagerContent>
                </MudTable>
            </MudContainer>
        }
    </MudPaper>
</div>


@code {
    public List<Department> departmentList { get; set; } = new List<Department>();
    public List<SampleList> userSampleList { get; set; } = new List<SampleList>();
    FilterParameter filterParameter = new FilterParameter();
    List<TicketUserAccount> ticketUserAccounts = new List<TicketUserAccount>();
 
    private bool isVisible;
    private bool dataFetched;
    private string searchTerm = "";
    
    //SAMPLE ONLY
    public class SampleList
    {
        public int Id { get; set; }
        public string EmployeeName { get; set; } = string.Empty;
        public string Department { get; set; } = string.Empty;
        public string Designation { get; set; } = string.Empty;
        public string EmailAddress { get; set; } = string.Empty;
        public string ContactInfo { get; set; } = string.Empty;
    }
    //

    protected override async Task OnInitializedAsync()
    {
        GlobalContentTitle.contentTitle = "User Accounts";
        while (GlobalClass.CurrentUserAccount == null) {
            await Task.Delay(1);
        }
        isVisible = true;
        //SAMPLE ONLY
        @* await GenerateSampleList(); *@
        //
        Task t = Task.WhenAll(GetTicketUserAccount());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
        {
            CompletedFetch();
        }
    }

    //SAMPLE ONLY
    async Task GetDepartmentList()
    {
        departmentList = (await EmployeeAccountService.GetDepartment(GlobalClass.Token)).ToList();
    }
    //

    async Task GetTicketUserAccount()
    {
         ticketUserAccounts = await ticketUserAccountService.LoadTicketUserAccount(filterParameter, await localStorage.GetItemAsync<string>("token"));
    }

     //SAMPLE ONLY
    public async Task GenerateSampleList()
    {
        for (int i = 0; i <= 40; i++) 
        {
            userSampleList.Add(new SampleList()
            {
                Id = i,
                EmployeeName = "Name" + Convert.ToString(i),
                Department = "Department" + Convert.ToString(i),
                Designation = "Designation" + Convert.ToString(i),
                EmailAddress = "EmailAddress" + Convert.ToString(i),
                ContactInfo = "ContactInfo" + Convert.ToString(i)
            });
        }

        await Task.WhenAll();
    }
    //

    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }

    void Add()
    {
        @* NavigationManager.NavigateTo($"/settings/user/add"); *@
    }

    void Edit(long Id)
    {
        NavigationManager.NavigateTo($"/settings/user/{Id}");
    }

    private bool FilterItems(TicketUserAccount items)
    {
        if (items.EmployeeName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        else if(items.Department.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        else if(items.Designation.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        @* else if(items.EmailAddress.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        else if(items.ContactInfo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true; *@
        return false;
    }
}