@page "/createactivity"
@inject NavigationManager NavigationManager
@inject ITicketActivityService ticketActivityService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogService DialogService
@inject IGlobalService globalService
@inject ISnackbar Snackbar

<MudToolBar class="otheractivityTopToolBar">
    <MudSpacer />
    <MudButton OnClick='Back' StartIcon="@Icons.Material.Outlined.ChevronLeft" Color="Color.Inherit" Class="mr-5">
        Back
    </MudButton>
</MudToolBar>

<MudContainer class='otheractivityContainer' Fixed='true' MaxWidth='MaxWidth.ExtraSmall'>

    <MudPaper Class='pa-4 ma-4 paperClassOtherActivity' Elevation='3'>
        @if (!dataFetched)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="55px" />
            <MudCardContent>
                <MudSkeleton Width="30%" Height="42px;" />
                <MudSkeleton Width="80%" />
                <MudSkeleton Width="100%" />
            </MudCardContent>
            <MudCardActions>
                <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
            </MudCardActions>
            <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </MudOverlay>
        }
        else
        {
            <MudPaper Elevation='2'>
                <MudContainer>
                    <MudToolBar class='otheractivityToolBar'>
                        <MudIcon Icon="@Icons.Material.Filled.LocalActivity" Size='Size.Medium' />
                        <MudText class='otheractivityHeader'>
                            Ticket Activity
                        </MudText>
                        <MudSpacer />
                        <MudButton OnClick='AddTicketActivity' Variant="Variant.Text" StartIcon="@Icons.Material.Filled.AddComment" Size='Size.Small' Disabled="@readOnly">Add</MudButton>
                    </MudToolBar>
                </MudContainer>
            </MudPaper>
            <MudContainer Class='othertablecontainer'>
                <MudTable Class='otheractivitytable' Items='@ticketActivities' FixedHeader='true' Hover='true' Dense='true' Striped='true' Bordered='false' Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" RowsPerPage='10'
                          FixedFooter='true'>
                    <HeaderContent>
                        <MudTh>Activity Date</MudTh>
                        <MudTh>Employee Name</MudTh>
                        <MudTh>Activity</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Remarks</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel='ActivityDate'>@Convert.ToDateTime(context.ActivityDate).ToString("MM/dd/yyyy")</MudTd>
                        <MudTd DataLabel='EmployeeName'>@context.UserName</MudTd>
                        <MudTd DataLabel='EmployeeName'>@context.ActivityName</MudTd>
                        <MudTd DataLabel='EmployeeName'>@context.StatusName</MudTd>
                        <MudTd DataLabel='EmployeeName'>@context.Remarks</MudTd>
                        <MudTd DataLabel="Actions">
                            <MudMenu Class="editicon" StartIcon="@Icons.Material.Filled.MoreVert" Direction='Direction.End' Dense='true'
                                     OffsetY='true' Disabled="@readOnly">
                                <MudMenuItem @onclick='@(() => UpdateTicketActivity(context.Id))'>
                                    <p style='display: flex; text-align: center;'>
                                        <MudIcon Icon='@Icons.Material.Filled.Edit' />
                                        <MudText style='padding-left: 10px; padding-top:3px; font-size: 14px; text-align: center;'>Edit</MudText>
                                    </p>
                                </MudMenuItem>
                                <MudMenuItem @onclick='@(() => RemoveTicketActivity(context.Id, context.StatusId, context.ActivityName, context.Remarks))'>
                                    <p style='display: flex; text-align: center;'>
                                        <MudIcon Icon='@Icons.Material.Filled.DeleteSweep' />
                                        <MudText style='padding-left: 10px; padding-top:2px; font-size: 14px; text-align: center;'>Remove</MudText>
                                    </p>
                                </MudMenuItem>
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudContainer>
        }
    </MudPaper>

    <MudPaper Class='pa-4 ma-4 paperClassotherActivityInfo' Elevation='3'>
        @if (!dataFetched)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="55px" />
            <MudCardContent>
                <MudSkeleton Width="30%" Height="42px;" />
                <MudSkeleton Width="80%" />
                <MudSkeleton Width="100%" />
            </MudCardContent>
            <MudCardActions>
                <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
            </MudCardActions>
            <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </MudOverlay>
        }
        else
        {
            <MudPaper>
                <MudContainer>
                    <MudToolBar class='otheractivityToolBar'>
                        <MudIcon Icon="@Icons.Material.Filled.Info" Size='Size.Medium' />
                        <MudSpacer />
                        <MudText class='activityHeader'>
                            Search Option
                        </MudText>
                        <MudSpacer />
                    </MudToolBar>
                </MudContainer>
            </MudPaper>
            <MudContainer>
                <MudGrid>
                    @* <MudItem xs ='12'> *@
                    <div class="datefilter">
                        <MudGrid>
                            <MudItem xs="4">
                                <MudCheckBox @bind-Checked="@filterParameter.IsActivityDate" Label="Date" Dense="true"></MudCheckBox>
                            </MudItem>
                            <MudItem xs='8'>
                                <MudDatePicker PickerVariant="PickerVariant.Inline" Label="Date From" @bind-Text="activitydatefrom"
                                               Disabled="!filterParameter.IsActivityDate" Margin="Margin.Dense"></MudDatePicker>
                                <MudDatePicker PickerVariant="PickerVariant.Inline" Label="Date To" @bind-Text="@activitydateto"
                                               Disabled="!filterParameter.IsActivityDate" Margin="Margin.Dense"></MudDatePicker>
                            </MudItem>
                        </MudGrid>
                    </div>
                    @* </MudItem> *@
                    @if(GlobalClass.CurrentUserAccount.AccessLevel == Enums.AccessLevel.Administrator)
                    {
                    <div class="datefilter">
                        <MudGrid>
                            <MudItem xs='4'>
                                <MudCheckBox @bind-Checked="@filterParameter.IsName" Label="Employee" Dense="true"></MudCheckBox>
                            </MudItem>
                            <MudItem xs='8'>
                                @* <MudTextField T='string' @bind-Value='@filterParameter.Name' Disabled='!filterParameter.IsName' /> *@
                                @*<MudTextField @bind-Value='@filterParameter.RequestorId' Disabled="!filterParameter.IsRequestor"
                                    Margin="Margin.Dense" />*@
                                <MudAutocomplete @bind-Value="@employee" SearchFunc="@GetAllEmployees" Label="Employee"
                                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Info"
                                                 ToStringFunc="@(e => e == null ? null : $"{e.EmployeeName}")"
                                                 Disabled="!filterParameter.IsName">
                                    <ItemTemplate Context="e">
                                        @*<MudAvatar Image="@(Convert.ToBase64String(e.Picture))" />*@
                                        <MudText>@($"{e.EmployeeName}")</MudText>
                                        <MudText id="auto-desig">@($"{e.Designation}")</MudText>
                                    </ItemTemplate>
                                </MudAutocomplete>
                            </MudItem>
                        </MudGrid>
                    </div>
                    }
                    <MudItem xs='12'></MudItem>
                    <MudItem xs='6'></MudItem>
                    <MudItem xs='6'>
                        <MudButton OnClick='SearchOtherActivity' Variant='Variant.Filled' Color='Color.Success' FullWidth='true'>Search</MudButton>
                    </MudItem>
                </MudGrid>
            </MudContainer>
        }
    </MudPaper>

</MudContainer>



@code {

    private bool isVisible, dataFetched, readOnly;
    List<TicketActivityModel> ticketActivities = new List<TicketActivityModel>();
    private FilterParameter filterParameter { get; set; } = new FilterParameter();
    private UserAccount employee = new UserAccount();
    string activitydatefrom = DateTime.Now.ToShortDateString();
    string activitydateto = DateTime.Now.ToShortDateString();
    List<UserAccount> userAccountEmployess = new List<UserAccount>();
    TicketActivityModel ticketActivityModel = new TicketActivityModel();


    protected override async Task OnInitializedAsync()
    {
        GlobalContentTitle.contentTitle = "Create Activity";
        isVisible = true;
        dataFetched = false;
        filterParameter.IsActivityDate = true;
        Task t = Task.WhenAll(GetAllTicketActivityWithoutTicket());
        @* Task t = Task.WhenAll(); *@
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
        {
            CompletedFetch();
        }
    }

    void Back()
    {
        NavigationManager.NavigateTo($"/ticketlist");
    }

    async Task GetAllTicketActivityWithoutTicket()
    {
        dataFetched = false;
        await Task.Delay(50);
        filterParameter.TicketUserAccountId = GlobalClass.CurrentUserAccount.EmployeeId;
        filterParameter.TicketAccessLevel = GlobalClass.CurrentUserAccount.AccessLevel;
        filterParameter.IsActivityDate = filterParameter.IsActivityDate;
        filterParameter.ActivityDateFrom = Convert.ToDateTime(activitydatefrom);
        filterParameter.ActivityDateTo = Convert.ToDateTime(activitydateto);
        ticketActivities = await ticketActivityService.GetTicketActivityWithoutTicket(filterParameter, await localStorage.GetItemAsync<string>("token"));
        if(ticketActivities.Count != 0)
            dataFetched = true;
        else
        {
            dataFetched = true;
            ShowAlert("No Data Found", Variant.Filled);
        }
    }

    void CompletedFetch()
    {
        isVisible = false;
        dataFetched = true;
        StateHasChanged();
    }
    private async Task AddTicketActivity()
    {
        var parameters = new DialogParameters();
        parameters.Add("IsOtherActivity", true);
        parameters.Add("ContentText", "Add Other Ticket Activity");
        parameters.Add("ButtonText", "Add");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        var resultDialog = await DialogService.Show<Shared.Dialogs.TicketActivityDialog>("Add Ticket", parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            string thisPage = "otheractivity";
            NavigationManager.NavigateTo($"/refresh/{thisPage}");
        }
    }
    private async Task UpdateTicketActivity(long Id)
    {
        var parameters = new DialogParameters { ["otherActivityId"] = Id };
        parameters.Add("IsOtherActivity", true);
        parameters.Add("ContentText", "Edit Other Ticket Actvity");
        parameters.Add("ButtonText", "Update");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        var resultDialog = await DialogService.Show<Shared.Dialogs.TicketActivityDialog>("Edit Activity", parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            string thisPage = "otheractivity";
            NavigationManager.NavigateTo($"/refresh/{thisPage}");
        }
    }
    async Task RemoveTicketActivity(long Id, long statusid, string activity, string remarks)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Other Ticket Activity");
        parameters.Add("ButtonText", "Remove");
        parameters.Add("Color", Color.Warning);
        parameters.Add("DialogContentText", "Remove Ticket Activity?");

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var resultDialog = await DialogService.Show<Shared.Dialogs.SubmitTicketDialog>("Submit Ticket", parameters,
        options).Result;
        if (!resultDialog.Cancelled)
        {
            ticketActivityModel.Id = Id;
            ticketActivityModel.UserId = GlobalClass.CurrentUserAccount.EmployeeId;
            ticketActivityModel.ActivityDate = DateTime.Now;
            ticketActivityModel.IsActive = false;
            ticketActivityModel.TicketId = null;
            ticketActivityModel.StatusId = statusid;
            ticketActivityModel.ActivityName = activity;
            ticketActivityModel.Remarks = remarks;
            await ticketActivityService.UpdateTicketActivityWithoutTicket(ticketActivityModel, await localStorage.GetItemAsync<string>("token"));
            ShowAlert("Ticket Activity Removed", Variant.Filled);
            string thisPage = "otheractivity";
            NavigationManager.NavigateTo($"/refresh/{thisPage}");
        }
    }

    async Task SearchOtherActivity()
    {
        filterParameter.IsName = filterParameter.IsName;
        @* filterParameter.Name = Convert.ToString(employee.EmployeeId); *@
        filterParameter.EmployeeId = employee.EmployeeId;
        await GetAllTicketActivityWithoutTicket();
    }

    #region Get All Employees

    async Task<IEnumerable<UserAccount>> GetAllEmployees(string employeeName)
    {
        if (employeeName.Length < 4)
            return null;
        else
        {
            Task t = Task.WhenAll(GetAll(employeeName));
            await t;
            return userAccountEmployess;
        }

    }

    async Task<IEnumerable<UserAccount>> GetAll(string empName)
    {
        var filterParameter = new FilterParameter()
        {
            IsName = true,
            Name = empName,
            IsLookUp = true
        };

        userAccountEmployess = await globalService.GetAllEmployees(filterParameter, await
        localStorage.GetItemAsync<string>("token"));
        return userAccountEmployess;
    }
    #endregion

    void ShowAlert(string message, Variant variant)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.SnackbarVariant = variant;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($" {message}", Severity.Warning);
    }
}
