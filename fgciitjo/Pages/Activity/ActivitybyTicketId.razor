@page "/activitybyid/{ticketId:long}"

@inject ITicketService ticketService
@inject ITicketActivityService ticketActivityService
@inject ITicketStatusService ticketStatusService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer class='activitycontainer' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    <MudContainer class='activitycontainer__subcontainer activitycontainer__toolbar' Fixed='false'
        MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if (!dataFetched)
        {

        }
        else
        {
            <MudChipSet Class='activitycontainer__itemchipset' @bind-SelectedChips="selected" MultiSelection='true'
            Filter="true">
                <MudChip Variant='Variant.Filled' Size='Size.Small' Default='true' style='@($"background-color:#00C853;")'>
                    Created</MudChip>
                <MudIcon Icon='@Icons.Material.Filled.ChevronRight' Size='Size.Small' />
                @foreach (var item in ticketOrderedList)
                {
                    if (item.Id == currTicket.TicketStatusId)
                    {
                        <MudChip Variant='Variant.Filled' Size='Size.Small' Default='false' style='@($"background-color:{item.StatusColor};")'>
                            @item.StatusName</MudChip>
                        break;
                    }
                    else
                    {
                        <MudChip Variant='Variant.Filled' Size='Size.Small' Default='true' style='@($"background-color:#00C853;")'>
                            @item.StatusName</MudChip>
                        <MudIcon Icon='@Icons.Material.Filled.ChevronRight' Size='Size.Small' />
                    }
                }
            </MudChipSet>
            <MudSpacer />
            <MudButton Variant='Variant.Text' OnClick='Back' EndIcon='@Icons.Material.Filled.ArrowForward'
            Size='Size.Small'>Return</MudButton>
        }
    </MudContainer>

    @if (!dataFetched)
    {
        <MudContainer class='activitycontainer__subcontainer' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="55px" />
            <MudCardContent>
                <MudSkeleton Width="30%" Height="42px;" />
                <MudSkeleton Width="80%" />
                <MudSkeleton Width="100%" />
            </MudCardContent>
            <MudCardActions>
                <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
            </MudCardActions>
            <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </MudOverlay>
        </MudContainer>
    }
    else
    {
        <MudContainer class='activitycontainer__subcontainer' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
            <MudOverlay Visible='ShowLoadingOverlay' Absolute='true' DarkBackground='true'>
                <MudProgressCircular class='loader-2' Size="Size.Large" Indeterminate="true" />
            </MudOverlay>
            <MudTable Class='activitytable ma-2' Hover='true' Breakpoint='Breakpoint.Sm' FixedHeader='true' Elevation='1'
            FixedFooter='true' Striped='true' Dense='true' RowsPerPage='10' Items='@ticketActivities'
            Filter='new Func<TicketActivityModel, bool>(FilterTable)'>
                <ToolBarContent>
                    <MudTextField Class='activitytable__txtsearch' @bind-Value='@searchTerm' Placeholder='Search activity' Clearable='true'
                    Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Medium'>
                    </MudTextField>
                    <MudSpacer />
                    <MudButton OnClick='AddTicketActivity' Variant="Variant.Text"
                    StartIcon="@Icons.Material.Filled.AddComment" Size='Size.Small' Disabled="@readOnly">Add</MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Class='activitytable__tableheader'>
                        <MudTableSortLabel InitialDirection='SortDirection.Descending'
                        SortBy='new Func<TicketActivityModel, object>(x => x.ActivityDate)'>
                            Activity Date
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='activitytable__tableheader'>
                        Activity
                    </MudTh>
                    <MudTh Class='activitytable__tableheader'>
                        Remarks
                    </MudTh>
                    <MudTh Class='activitytable__tableheader'>
                        More
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudContainer Class='activitytable__rowcontainer' Fixed='true'>
                            <MudText>
                                @Convert.ToDateTime(context.ActivityDate).ToShortDateString()
                            </MudText>
                            <MudText>
                                @foreach (var item in ticketStatusList)
                                {
                                    if (context.StatusName == item.StatusName)
                                    {
                                    <MudChip Class='activitytable__itemchip' Size='Size.Small'
                                    style='@($"background-color:{item.StatusColor};")'>@context.StatusName</MudChip>
                                    break;
                                    }
                                }
                            </MudText>
                        </MudContainer>
                    </MudTd>
                    <MudTd>
                        @context.ActivityName
                    </MudTd>
                    <MudTd>
                        @context.Remarks
                    </MudTd>
                    <MudTd>
                        <MudContainer Class='activitytable__rowcontainer' Fixed='true'>
                            <MudMenu Icon='@Icons.Material.Filled.MoreVert' Direction='Direction.End' Dense='true'
                                Size='Size.Small'>
                                <MudMenuItem @onclick='@(() => UpdateTicketActivity(context.Id))'>
                                    <p style='display: flex; text-align: center;'>
                                        <MudIcon Icon='@Icons.Material.Filled.Edit' />
                                        <MudText
                                            style='padding-left: 10px; padding-top:3px; font-size: 14px; text-align: center;'>
                                            Edit</MudText>
                                    </p>
                                </MudMenuItem>
                                <MudMenuItem @onclick='@(() => AddMRItem(context.Id))'>
                                    <p style='display: flex; text-align: center;'>
                                        <MudIcon Icon='@Icons.Material.Filled.Inventory2' />
                                        <MudText
                                            style='padding-left: 10px; padding-top:3px; font-size: 14px; text-align: center;'>
                                            MR Asset Tag</MudText>
                                    </p>
                                </MudMenuItem>
                                <MudMenuItem
                                    @onclick='@(() => RemoveTicketActivity(context.Id, context.StatusId, context.ActivityName, context.Remarks))'>
                                    <p style='display: flex; text-align: center;'>
                                        <MudIcon Icon='@Icons.Material.Filled.DeleteSweep' />
                                        <MudText
                                            style='padding-left: 10px; padding-top:2px; font-size: 14px; text-align: center;'>
                                            Remove</MudText>
                                    </p>
                                </MudMenuItem>
                            </MudMenu>
                        </MudContainer>
                    </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudContainer>
    }

    @if (!dataFetched)
    {
        <MudContainer class='activitycontainer__subcontainer ticketinfo' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="55px" />
            <MudCardContent>
                <MudSkeleton Width="30%" Height="42px;" />
                <MudSkeleton Width="80%" />
                <MudSkeleton Width="100%" />
            </MudCardContent>
            <MudCardActions>
                <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
            </MudCardActions>
            <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </MudOverlay>
        </MudContainer>
    }
    else
    {
        <MudContainer class='activitycontainer__subcontainer ticketinfo' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
            <MudContainer Class='ticketinfo__container' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
                <MudText Class='ticketinfo__title' Typo='Typo.h6'>Ticket Information</MudText>
                <MudTextField T='string' Label='Ticket No:' ReadOnly='true' @bind-Value='currTicket.TicketNumber'
                style='color: red;' />
                <MudTextField T='string' Label='Requestor:' ReadOnly='true' @bind-Value='currTicket.RequestorName' />
                <MudTextField T='string' Label='Task Title:' ReadOnly='true' @bind-Value='currTicket.IssueSummary' />
                <MudTextField T='string' Label='Issue:' ReadOnly='true' @bind-Value='currTicket.TaskDescription'
                Variant='Variant.Outlined' Lines='4' />
                <MudText Class='ticketinfo__txtchip'>Priority:
                    @if (currTicket.PriorityLevelId == Enums.PriorityLevel.Low)
                    {
                        <MudChip Color='Color.Info' Size='Size.Small'>@currTicket.PriorityLevelId</MudChip>
                    }
                    @if (currTicket.PriorityLevelId == Enums.PriorityLevel.Medium)
                    {
                        <MudChip Color='Color.Warning' Size='Size.Small'>@currTicket.PriorityLevelId</MudChip>
                    }
                    @if (currTicket.PriorityLevelId == Enums.PriorityLevel.High)
                    {
                        <MudChip Color='Color.Error' Size='Size.Small'>@currTicket.PriorityLevelId</MudChip>
                    }
                </MudText>
                <MudText Class='ticketinfo__txtchip'>Status:
                    <MudChip Size='Size.Small' style='@($"background-color:{currTicketStatus.StatusColor};")'>
                        @currTicket.TicketStatusName</MudChip>
                </MudText>
            </MudContainer>
        </MudContainer>
    }

</MudContainer>




@code {
    private string Token, searchTerm = default!;
    private bool isVisible, dataFetched, readOnly, ShowLoadingOverlay;
    string color;
    [Parameter] public long ticketId { get; set; }
    List<TicketActivityModel> ticketActivities = new List<TicketActivityModel>();
    private TicketModel currTicket { get; set; } = new TicketModel();
    TicketActivityModel ticketActivityModel = new TicketActivityModel();
    private TicketStatusModel currTicketStatus = new TicketStatusModel();
    private List<TicketStatusModel> ticketStatusList, ticketOrderedList = new List<TicketStatusModel>();
    MudChip[] selected;

    protected override async Task OnInitializedAsync()
    {
        GlobalContentTitle.contentTitle = "TICKET ACTIVITY";
        isVisible = true;
        dataFetched = false;
        Task t = Task.WhenAll(GetTicket(), GetAllActivityById(), GetTicketStatusList());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
        {
            Task u = Task.WhenAll(GetTicketStatus());
            await u;
            if (u.Status == TaskStatus.RanToCompletion)
            {
                DisplayStatus();
                CompletedFetch();
            }
        }
    }

    private async Task GetTicketStatus()
    {
        currTicketStatus = await ticketStatusService.GetTicketStatusById(currTicket.TicketStatusId, await
        localStorage.GetItemAsync<string>("token"));
    }
    private async Task GetTicket()
    {
        currTicket = await ticketService.GetTicketById(ticketId, await localStorage.GetItemAsync<string>("token"));
    }
    private async Task GetAllActivityById()
    {
        ticketActivities = await ticketActivityService.GetAllActivityById(ticketId, await
        localStorage.GetItemAsync<string>("token"));
    }

    private async Task GetTicketStatusList()
    {
        var filterParameter = new FilterParameter();
        ticketStatusList = await ticketStatusService.GetTicketStatus(filterParameter, await
        localStorage.GetItemAsync<string>("token"));
        var newOrder = new List<long>{1,8,2,3,4,5,6,7,9,10,11,12};
        ticketOrderedList = ticketStatusList.OrderBy(x => newOrder.IndexOf(x.Id)).ToList();
    }

    void CompletedFetch()
    {
        isVisible = false;
        dataFetched = true;
        StateHasChanged();
    }

    void Back()
    {
        NavigationManager.NavigateTo($"/ticketlist");
    }

    private async Task AddTicketActivity()
    {
        var parameters = new DialogParameters();
        parameters.Add("ticketStatusID", currTicket.TicketStatusId);
        parameters.Add("ticketStatusTypeId", currTicket.TicketStatusTypeId);
        parameters.Add("TicketId", ticketId);
        parameters.Add("ContentText", "Add Ticket Activity");
        parameters.Add("ButtonText", "Add");
        parameters.Add("ticketdate", currTicket.TicketDate);
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        var resultDialog = await DialogService.Show<Shared.Dialogs.TicketActivityDialog>("Add Ticket", parameters,
        options).Result;
        if (!resultDialog.Cancelled)
        {
            string thisPage = "ticketactivity";
            NavigationManager.NavigateTo($"/refresh/{thisPage}/{ticketId}");
        }
    }
    private async Task UpdateTicketActivity(long Id)
    {
        var parameters = new DialogParameters { ["Id"] = Id };
        parameters.Add("TicketId", ticketId);
        @* parameters.Add("ticketStatusName", currTicket.TicketStatusName); *@
        parameters.Add("ContentText", "Edit Ticket Actvity");
        parameters.Add("ButtonText", "Update");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        ShowLoadingOverlay = true;
        var resultDialog = await DialogService.Show<Shared.Dialogs.TicketActivityDialog>("Edit Activity", parameters,
        options).Result;
        if (!resultDialog.Cancelled)
        {
            @* string thisPage = "ticketactivity";
                NavigationManager.NavigateTo($"/refresh/{thisPage}/{ticketId}"); *@

            Task t = Task.WhenAll(GetAllActivityById());
            await t;
            ShowLoadingOverlay = false;
            StateHasChanged();
        }
        else
        {
            ShowLoadingOverlay = false;
            StateHasChanged();
        }
    }
    private async Task AddMRItem(long activityId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Ticket MR Assets");
        parameters.Add("ButtonText", "Save");
        parameters.Add("Color", Color.Success);
        parameters.Add("ticketActivityId", activityId);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var resultDialog = await DialogService.Show<Shared.Dialogs.TicketMRItemDialog>("Add Assets", parameters,
        options).Result;
    }
    async Task RemoveTicketActivity(long Id, long statusid, string activity, string remarks)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Ticket Activity");
        parameters.Add("ButtonText", "Remove");
        parameters.Add("Color", Color.Warning);
        parameters.Add("DialogContentText", "Remove Ticket Activity?");

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var resultDialog = await DialogService.Show<Shared.Dialogs.SubmitTicketDialog>("Submit Ticket", parameters,
        options).Result;
        if (!resultDialog.Cancelled)
        {
            ticketActivityModel.Id = Id;
            ticketActivityModel.Activity = "Remove Ticket Activity";
            ticketActivityModel.UserId = GlobalClass.CurrentUserAccount.EmployeeId;
            ticketActivityModel.ActivityDate = DateTime.Now;
            ticketActivityModel.IsActive = false;
            ticketActivityModel.TicketId = ticketId;
            ticketActivityModel.StatusId = statusid;
            ticketActivityModel.ActivityName = activity;
            ticketActivityModel.Remarks = remarks;
            await ticketActivityService.UpdateTicketActivity(ticketActivityModel, await localStorage.GetItemAsync<string>("token"));
            ShowAlert("Ticket Activity Removed", Variant.Filled);
            string thisPage = "ticketactivity";
            NavigationManager.NavigateTo($"/refresh/{thisPage}/{ticketId}");
        }
    }
    void ShowAlert(string message, Variant variant)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.SnackbarVariant = variant;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($" {message}", Severity.Warning);
    }

    void DisplayStatus()
    {
        if (currTicket.TicketStatusTypeId == Enums.TicketStatusType.Complete)
        {
            readOnly = true;
        }
        else
            readOnly = false;
    }

    private bool FilterTable(TicketActivityModel activity) => FilterFunc(activity, searchTerm);
    private bool FilterFunc(TicketActivityModel activity, string search)
    {
        @* ShowLoadingOverlay = true; *@
        if (string.IsNullOrEmpty(search))
            return true;
        if (activity.ActivityName.Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}