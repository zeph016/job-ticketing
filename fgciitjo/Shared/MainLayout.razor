@inherits LayoutComponentBase

@inject IUserAccountService UserAccountService
@inject IAuditTrailService auditTrailService
@inject ITicketService ticketService
@inject IEmployeeAccountService employeeAccountService
@inject ITicketCategoryService ticketCategoryService
@inject ITicketBranchService ticketBranchService
@inject ITicketStatusService TicketStatusService
@inject ITicketCommentService TicketCommentService
@inject IGlobalService globalService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IConfiguration config
@inject ISnackbar Snackbar
@inject IJSRuntime IJSrun
@inject ApplicationState AppState
@implements IDisposable

<MudThemeProvider  @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout @onclick='RefreshPopUps'>
    <MudAppBar class='top-appbar' Fixed Elevation='0' Dense>
        <AuthorizeView>
            <Authorized>
                <MudText class='top-appbar__content-title' Typo='Typo.h6' Style='@updateStyleStr'>@GlobalContentTitle.contentTitle</MudText>
                <MudSpacer />
                <MudTooltip Text='@(!_isDarkMode ? "Dark Mode" : "Light Mode")' Arrow Placement='Placement.Top'>
                    <MudIconButton OnClick='ToggleTheme' Icon='@(!_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)' 
                        Size='Size.Small'/>
                </MudTooltip>
                <MudBadge Class='zindex-1' Content='@ApplicationState.Notifications.Where(x=>x.isRead == false).Count()' Color="Color.Error" Overlap Visible Style='@badgeStyleString'>
                    <MudTooltip Text='View notifications' Arrow Placemen='Placement.Top'>
                        <MudIconButton OnClick='NotificationClick'
                            Icon="@(!ApplicationState.IsNotificationSilent ? Icons.Material.Filled.Notifications : Icons.Material.Filled.NotificationsOff)" Color="Color.Default" Size='Size.Small' />
                    </MudTooltip>
                </MudBadge>
                <div class='user-panel mx-auto' @onclick='ToggleUserCp'>
                    <MudExpansionPanels DisableBorders='@borderValue' Elevation='@elevationValue'>
                        <MudExpansionPanel class='user-panel__expandpanel' IsExpanded='@userCpOpen'>
                            <TitleContent>
                                <div class='d-flex' style="@usercpStyleString">
                                    <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@GlobalClass.CurrentUserAccount.Picture)}")' />
                                    <div>
                                        <MudText class='user-panel__txtname'>@GlobalClass.CurrentUserAccount.FirstName</MudText>
                                        <MudText class='user-panel__txtdesignation'>
                                            @(GlobalClass.CurrentUserAccount.Designation + " - " + Extensions.GetEnumDescription(GlobalClass.CurrentUserAccount.AccessLevel))
                                        </MudText>
                                    </div>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudDivider />
                                <div class='user-panel__btncontainer py-2'>
                                    <MudButton Class='user-panel__btncontainer-btn' Variant='Variant.Text' StartIcon='@Icons.Material.Filled.Settings' Size='Size.Small'>Settings</MudButton>
                                    <MudSpacer />
                                    <MudButton class='user-panel__btncontainer-btn' OnClick='ToHub' Variant='Variant.Text' StartIcon='@Icons.Material.Filled.ExitToApp' Size='Size.Small'>Back to Hub</MudButton>
                                </div>
                                <MudDivider />
                                <div class='py-2'>
                                    <MudButton class='user-panel__logout-btn' OnClick='LogOut' Variant="Variant.Filled" DisableElevation
                                        StartIcon="@Icons.Material.Filled.Logout" Color="Color.Error" style='@hiddenStyleRem' FullWidth>
                                        Log Out
                                    </MudButton>
                                </div>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudPopover Open='@_isNotifOpen' AnchorOrigin='Origin.BottomRight' TransformOrigin='Origin.TopRight' OverflowBehavior='OverflowBehavior.FlipAlways'
                            Paper='false'>
                            <CascadingValue Value='@ApplicationState'>
                                <NotificationListCard SetNotificationSetting='((bool value) => SetNotificationSetting(value))' CloseNotificationList='(() => { _isNotifOpen = false; StateHasChanged(); } )'/>
                            </CascadingValue>
                        </MudPopover>
                    </MudExpansionPanels>
                </div>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer Class='main-layout-drawer' @bind-Open='@drawerOpen' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
        <MudDrawerHeader Class='drawer-header'>
            <MudIconButton OnClick='@ToggleDrawer' Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
            <MudText Class='drawer-header__header-text text-center'>TICKETING SYSTEM</MudText>
        </MudDrawerHeader>
        <AuthorizeView>
            <Authorized>
                <MudNavMenu class='mainnavmenu' style="@navmenustylestring">
                    <MudNavLink Href='/dashboard' Icon='@Icons.Material.Filled.Dashboard'>DASHBOARD</MudNavLink>
                    <MudNavLink Href='/ticket/create' Icon='@Icons.Material.Filled.Assignment' style='@hiddenStyleRem'>CREATE TICKET</MudNavLink>
                    <MudNavLink Href='/ticket/list' Icon='@Icons.Material.Filled.FactCheck' style='@hiddenStyleRem'>TICKET LIST</MudNavLink>
                    @if (GlobalClass.CurrentUserAccount.AccessLevel != Enums.AccessLevel.Client)
                    {
                        <MudNavLink Href='/create/other-activity' Icon='@Icons.Material.Filled.SyncAlt' style='@hiddenStyleString'>OTHER ACTIVITY</MudNavLink>
                        <MudNavGroup Title='REPORTS' Icon='@Icons.Material.Filled.Assessment' HideExpandIcon style='@hiddenStyleString'>
                            <MudNavLink Href='/report/daily-accomplishment' Icon='@Icons.Material.Filled.Summarize'>ACCOMPLISHMENT</MudNavLink>
                            <MudNavLink Href='/report/ticket/list' Icon='@Icons.Material.Filled.Summarize'>TICKET LIST</MudNavLink>
                        </MudNavGroup>
                        <MudNavGroup Title='SETTINGS' Icon='@Icons.Material.Filled.Settings' HideExpandIcon style='@hiddenStyleString'>
                            <MudNavLink Href='/settings/useraccounts' Icon='@Icons.Material.Filled.People'>USER ACCOUNTS</MudNavLink>
                            <MudNavLink Href='/settings/ticket/status' Icon='@Icons.Material.Filled.BookOnline'>TICKET STATUS</MudNavLink>
                            <MudNavLink Href='/settings/ticket/category' Icon='@Icons.Material.Filled.Article'>TICKET CATEGORY</MudNavLink>
                            <MudNavLink Href='/settings/ticket/branch' Icon='@Icons.Material.Filled.CorporateFare'>TICKET BRANCH</MudNavLink>
                        </MudNavGroup>
                    }
                </MudNavMenu>
            </Authorized>
            <NotAuthorized>
                <MudNavMenu Class='pb-2'>
                    <MudNavLink Class='txt-uppercase' Href='http://10.0.0.7:8000' Match='NavLinkMatch.All' Icon='@Icons.Material.Filled.Home'>
                        Back To Hub
                    </MudNavLink>
                </MudNavMenu>
           </NotAuthorized>
        </AuthorizeView>
        <MudSpacer />
        <div class='d-flex align-center justify-center'>
            <MudIcon class='HeaderIcon' Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Large" />
        </div>
    </MudDrawer>
    <MudMainContent>
        <div class='main-body-container blzr-bg-surface' style='overflow:hidden;'>
            @Body
        </div>
    </MudMainContent>
    <MudAppBar Class='footer-appbar' Bottom Fixed Elevation='0' Dense>
        <MudText Color='Color.Default'>
            v1.3.0.27
        </MudText>
        <MudIconButton OnClick='RefreshPage' Icon="@Icons.Material.Filled.Refresh" aria-label="Refresh page" />
        <MudSpacer />
        <MudText>
            <div @ref='timeElement'>@* CLOCK *@</div>
        </MudText>
        <MudIconButton OnClick='ToggleFullScreen' Icon="@Icons.Material.Filled.Fullscreen" aria-label="Fullscreen" />
    </MudAppBar>
</MudLayout>
<UpdateAvailableDetector/>

@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = new();
    FilterParameter filterParameter = new FilterParameter();
    private HubConnection hubConnection = default!, commentConnection = default!;
    List<TicketAuditTrail> auditTrails = new List<TicketAuditTrail>();
    public List<UserAccount> requestorAccounts = new List<UserAccount>();
    public List<NotificationTrailModel> notificationList = new List<NotificationTrailModel>();
    private List<TicketComment> ticketComments = new List<TicketComment>();
    private List<NotificationTrailModel> notifs = new List<NotificationTrailModel>();
    private UserAccount requestorAccount = new UserAccount();
    public UserAccount userAccount = new UserAccount();
    private TicketComment comment = new TicketComment();
    public Enums.AccessLevel accessLevel { get; set; }
    public string imageSource { get; set; } = "data:image/png;base64, ";
    public bool drawerOpen = true, userCpOpen = false, ticketFetched, borderValue = true, isFullScreen, isTokenValidated, isAuthenticated, ShowLoadingOverlay, isChatOpen;
    string styleString = "background-color: #F7F7F8;", usercpStyleString = "width: 250px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;",
    hiddenStyleString = "display:none;", hiddenStyleRem = string.Empty, hiddenStyleUserCPElements = string.Empty, cookieToken = string.Empty, badgeStyleString = string.Empty, navmenustylestring = string.Empty;
    int elevationValue = 0;
    public int? badgeContent;
    ElementReference timeElement;
    public bool _isNotifOpen, dataFetched, isVisible;
    private string imageConv = "data:image/png;base64, ", updateStyleStr = string.Empty;
    private string requestorAvatarSource { get; set; } = string.Empty;
    private UserAccount requestorAvatar = new UserAccount();
    private List<TicketModel> newTickets = new List<TicketModel>();
    private TimeSpan seconds, minuteOne, minuteTwo, minutes, hourOne, hourTwo,
    dayOne, dayTwo, weekOne, weekTwo, monthOne, monthTwo, monthYearOne, monthYearTwo;
    private PeriodicTimer timer = new PeriodicTimer(TimeSpan.FromSeconds(10));
    public AppStoreState ApplicationState = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("startTime", timeElement);
            _isDarkMode = await Extensions.GetDarkSetting(localStorageService);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (GlobalClass.AccountAuthorized)
        {
            Task t = Task.WhenAll(CheckSetNotifications(), MapGlobalTime(), LoadConnection(), LoadTicketCommentConnection());
            await t;
            if (t.Status == TaskStatus.RanToCompletion)
            {
                GlobalList.TicketComments = new List<TicketComment>();
                Task u = Task.WhenAll(LoadNotification(), LastTicketSaved(), LoadGlobaClassList(),PopulateCatTypeList());
                await u;
                if (u.Status == TaskStatus.RanToCompletion)
                {
                    notifyComments();
                    InvokeNewTicket();
                }
                CheckAccessLevelLinks();
                
                CompletedFetch();
                ApplicationState.OnChange += StateHasChanged;
                AppState.OnChange += StateHasChanged;
            }
        }
    }
    private void ToggleDrawer() =>  drawerOpen = !drawerOpen;

    private void ToggleUserCp()
    {
        userCpOpen = !userCpOpen;
        _isNotifOpen = false;
        ToggleUserCPdesign();
    }
    private void NotificationClick()
    {
        _isNotifOpen = !_isNotifOpen;
        userCpOpen = false;
        ToggleUserCPdesign();
    }

    private void ToggleUserCPdesign()
    {
        if (userCpOpen == true)
        {
            borderValue = false;
            elevationValue = 1;
            styleString = "background-color: white;";
            usercpStyleString = "width: 250px; ";
        }
        else
        {
            borderValue = true;
            elevationValue = 0;
            styleString = "background-color: #F7F7F8;";
            usercpStyleString = "width: 250px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;";
        }
    }

    private void MapGlobal()
    {
        GlobalClass.CurrentUserAccount = userAccount;
        imageSource += Convert.ToBase64String(userAccount.Picture);
        accessLevel = userAccount.AccessLevel;
        CheckAccessLevelLinks();
    }
    private async Task MapGlobalTime()
    {
        DateTime _serverTime = await globalService.LoadServerTime();
        GlobalContentTitle.contentServerTime = _serverTime;
    }
    private void NavigateToPage(string location)
    {
        NavigationManager.NavigateTo($"{location}");
    }

    private async void ToHub()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Return to Hub?");
        parameters.Add("ButtonText", "Proceed");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        var resultDialog = await DialogService.Show<Dialogs.LogOutDialog>("Exit", parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            //Change according to production
            NavigateToPage($"http://10.0.0.7:8000"); //server 7 main hub
        }
    }

    private async Task LogOut()
    {
        var parameters = new DialogParameters();
        parameters.Add("DialogTitle", "Log out?");
        parameters.Add("IconString", Icons.Material.Filled.Logout);
        parameters.Add("CancelText", "Cancel");
        parameters.Add("SubmitText", "Yes, Log out");
        parameters.Add("ContentText", "Logging out of the system will return you to systems hub, all unsaved changes will be lost.");
        parameters.Add("DialogAction", Enums.CrudeMode.Delete);
        var options = new DialogOptions 
        { 
            NoHeader = true,
            CloseOnEscapeKey = true,
            DisableBackdropClick = true,
            MaxWidth = MaxWidth.ExtraSmall
        };
        var resultDialog = await DialogService.Show<Shared.Components.Dialog>(string.Empty, parameters, options).Result;
        if (!resultDialog.Canceled) 
        {
            await localStorageService.ClearAsync();
            await JSRuntime.InvokeVoidAsync("DeleteCookie");
            NavigateToPage($"http://10.0.0.7:8000");
        }
    }

    private void CheckAccessLevelLinks()
    {
        if (accessLevel != Enums.AccessLevel.Client)
        {
            hiddenStyleString = "display: block;";
            hiddenStyleUserCPElements = "display: none;";
        }
        navmenustylestring = "display: block;";
    }

    private void DisableAllLinks()
    { 
        navmenustylestring = "display: none;";
        styleString = "display: none;";
        hiddenStyleString = "display: none;";
        hiddenStyleRem = "display: none;";
        hiddenStyleUserCPElements = "display: none";
        badgeStyleString = "display: none;";
    }

    private async void ToggleFullScreen()
    {
        if (!isFullScreen)
        {
            await JSRuntime.InvokeVoidAsync("openFullscreen");
            isFullScreen = !isFullScreen;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("closeFullscreen");
            isFullScreen = !isFullScreen;
        }
    }

    async Task GetAllAuditTrails()
    {
        while (GlobalClass.CurrentUserAccount == null)
        {
            //Delay UI if GlobalClass is not loaded yet
            await Task.Delay(1);
        }
        @* filterParameter.TicketUserAccountId = GlobalClass.CurrentUserAccount.EmployeeId; *@
        filterParameter.ActivityDateFrom = await globalService.LoadServerTime();
        @* filterParameter.ActivityDateFrom = Convert.ToDateTime("12-04-2021"); *@
        auditTrails = await auditTrailService.GetAllAuditTrails(filterParameter, GlobalClass.Token);
        badgeContent = auditTrails.Count();
        await CheckAccountsCache();
    }
    async Task GetAuditTrailsByEmployee()
    {
        while (GlobalClass.CurrentUserAccount == null)
        {
            //Delay UI if GlobalClass is not loaded yet
            await Task.Delay(1);
        }
        filterParameter.RequestorId = GlobalClass.CurrentUserAccount.EmployeeId;
        filterParameter.ActivityDateFrom = await globalService.LoadServerTime();
        auditTrails = await auditTrailService.GetAuditTrailsByEmployee(filterParameter, GlobalClass.Token);
        badgeContent = auditTrails.Count();
        Task t =  CheckAccountsCache();
        await t;
    }
    async Task GetAuditTrailsByIT()
    {
        while (GlobalClass.CurrentUserAccount == null)
        {
            //Delay UI if GlobalClass is not loaded yet
            await Task.Delay(1);
        }
        filterParameter.TicketUserAccountId = GlobalClass.CurrentUserAccount.EmployeeId;
        filterParameter.ActivityDateFrom = await globalService.LoadServerTime();
        @* filterParameter.ActivityDateFrom = Convert.ToDateTime("12-04-2021"); *@
        auditTrails = await auditTrailService.GetAuditTrailsByIT(filterParameter, GlobalClass.Token);
        badgeContent = auditTrails.Count();
        Task t = CheckAccountsCache();
        await t;
    }
    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }

    private async Task CheckAccountsCache()
    {
        foreach (TicketAuditTrail auditTrails in auditTrails)
        {
            var notificationItem = new NotificationTrailModel()
            {
                Id = auditTrails.Id,
                EmployeeId = auditTrails.UserId,
                TicketNumber = auditTrails.TicketNumber,
                UserAccountName = auditTrails.UserAccountName,
                LogDateTime = auditTrails.LogDatetime,
                Activity = auditTrails.Activity,
                isRead = false,
                TimeMoment = await SetTimeMoment(auditTrails.LogDatetime),
                TicketId = auditTrails.TicketId
            };

            if (!notificationList.Any(x => x.Id == auditTrails.Id))
                notificationList.Add(notificationItem);

            bool containsItem = requestorAccounts.Any(x => x.EmployeeId == auditTrails.UserId);
            if (!containsItem)
                await GetRequestorAccounts(auditTrails.UserId);
        }
        notificationList = notificationList.OrderByDescending(x => x.LogDateTime).ToList();

    }
    private async Task GetRequestorAccounts(long UserId)
    {
        if (UserId != 0)
        {
             requestorAccount = await employeeAccountService.GetEmployee(GlobalClass.Token, UserId);
            requestorAccounts.Add(requestorAccount);
        }
    }
    private async void RefreshPage()
    {
        await JSRuntime.InvokeVoidAsync("HardReload");
    }

    private async Task<string> SetTimeMoment(DateTime logDate)
    {
        string timeMoment = "";
        DateTime dateNow = GlobalContentTitle.contentServerTime;
        TimeSpan diff = dateNow - Convert.ToDateTime(logDate);
        seconds = new TimeSpan(0, 0, 59);
        minuteOne = new TimeSpan(0, 01, 0);
        minuteTwo = new TimeSpan(0, 02, 0);
        minutes = new TimeSpan(0, 59, 0);
        hourOne = new TimeSpan(1, 0, 0);
        hourTwo = new TimeSpan(2, 0, 0);
        dayOne = new TimeSpan(24, 0, 0);
        dayTwo = new TimeSpan(48, 0, 0);
        weekOne = new TimeSpan(168, 0, 0);
        weekTwo = new TimeSpan(336, 0, 0);
        monthOne = new TimeSpan(730, 0, 0);
        monthTwo = new TimeSpan(1460, 0, 0);
        monthYearOne = new TimeSpan(8760, 0, 0);
        monthYearTwo = new TimeSpan(17520, 0, 0);

        await Task.Run(() =>
        {
            if (diff <= seconds)
            {
                timeMoment = "a moment ago";
                return;
            }
            else if (diff >= minuteOne && diff <= minuteTwo)
            {
                timeMoment = "a minute ago";
                return;
            }
            else if (diff >= minuteTwo && diff <= minutes)
            {
                timeMoment = $"{diff.Minutes} minutes ago";
                return;
            }
            else if (diff >= hourOne && diff <= hourTwo)
            {
                timeMoment = $"{diff.Hours} hour ago";
                return;
            }
            else if (diff > hourTwo && diff < dayOne)
            {
                timeMoment = $"{diff.Hours} hours ago";
                return;
            }
            else if (diff >= dayOne && diff < dayTwo)
            {
                timeMoment = $"{diff.Days} day ago";
                return;
            }
            else if (diff > dayTwo && diff < weekOne)
            {
                timeMoment = $"{diff.Days} days ago";
                return;
            }
            else if (diff >= weekOne && diff < weekTwo)
            {
                var week = diff / weekOne;
                timeMoment = $"{Math.Round(week)} week ago";
                return;
            }
            else if (diff > weekTwo && diff < monthOne)
            {
                var weeksPassed = diff / weekOne;
                timeMoment = $"{Math.Round(weeksPassed)} weeks ago";
                return;
            }
            else if (diff >= monthOne && diff < monthTwo)
            {
                var month = diff / monthOne;
                timeMoment = $"{Math.Round(month)} month ago";
                return;
            }
            else if (diff >= monthTwo && diff < monthYearOne)
            {
                var months = diff / monthOne;
                timeMoment = $"{Math.Round(months)} months ago";
                return;
            }
            else if (diff >= monthYearOne && diff < monthYearTwo)
            {
                var year = diff / monthYearOne;
                timeMoment = $"{Math.Round(year)} year ago";
                return;
            }
            else if (diff > monthYearTwo)
            {
                var years = diff / monthYearOne;
                timeMoment = $"{Math.Round(years)} years ago";
                return;
            }
        });
        return timeMoment;
    }

    private async Task ClearNotificationList()
    {
        await Task.Run(() =>
        {
            notificationList = new List<NotificationTrailModel>();
            @* foreach (var items in notificationList) {
                items.isRead = true;
                } *@
        });
        StateHasChanged();
    }

    private async Task PeekTicketInfo(long ticketid, long empId)
    {
        ShowLoadingOverlay = true;
        if (_isNotifOpen)
            _isNotifOpen = false;

        TicketModel context = new TicketModel();
        context.Id = ticketid;
        context.RequestorId = empId;
        GlobalContentTitle.contentServerTime = await globalService.LoadServerTime();
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Ticket Info");
        parameters.Add("ButtonText", "Return");
        parameters.Add("Color", Color.Primary);
        parameters.Add("currTicketInfo", context);
        parameters.Add("FromNotif", true);
        parameters.Add("Token", GlobalClass.Token);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader = true };

        var resultDialog = await DialogService.Show<Shared.Dialogs.TicketPeekInfoDialog>("Ticket Info", parameters,
        options).Result;
        if (!resultDialog.Canceled)
        {
            ShowLoadingOverlay = false;
        }
        else
        {
            ShowLoadingOverlay = false;
        }
    }
    void ShowAlert(string message, Severity severity, int displayed)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($"{message}", severity);
    }
    private async Task LoadTicketCommentConnection()
    {
        commentConnection = new HubConnectionBuilder()
              .WithUrl(config["SignalRConnection"] + "ticketcommenthub")
              .WithAutomaticReconnect()
              .Build();
        await commentConnection.StartAsync();
    }

    void notifyComments()
    {
        commentConnection.On<TicketComment>("ReceiveTicketComment", (comment) =>
        {
            ticketComments.Add(comment);
            GlobalList.TicketComments = ticketComments.ToList();
            StateHasChanged();
            Task.Delay(1);
        });
    }
    private async Task LoadConnection()
    {
        hubConnection = new HubConnectionBuilder()
           .WithUrl(config["SignalRConnection"] + "ticketlisthub")
           .WithAutomaticReconnect()
           .Build();
        await hubConnection.StartAsync();
    }
    private void InvokeNewTicket()
    {
        hubConnection.On<List<TicketModel>>("GetAllTicketList", async (_list) =>
        {
            await GetLatestTicket();
        });
    }
    async Task LastTicketSaved()
    {
        var newTicket = await ticketService.GetLatestTicket(GlobalClass.Token);
        newTickets.Add(newTicket);
    }

    private async Task GetLatestTicket()
    {
        if (GlobalClass.CurrentUserAccount.AccessLevel != Enums.AccessLevel.Client)
        {
            var newTicket = await ticketService.GetLatestTicket(GlobalClass.Token);

            if (!newTickets.Any(x => x.Id == newTicket.Id) && newTicket.RequestorId != GlobalClass.CurrentUserAccount.EmployeeId)
            {
                Task t = ShowNotificationCard(newTicket);
                await t;
                if (t.Status == TaskStatus.RanToCompletion)
                    StateHasChanged();
            }
        }
    }

    private async Task LoadNotification()
    {
        hubConnection.On<List<TicketModel>>("GetAllTicketAuditTrail", (_list) =>
        {
            Task.Run(async () => await AuditTrails());
        });
        await hubConnection.InvokeAsync("GetTicketAuditTrail", filterParameter);
        return;
    }
    private async Task AuditTrails()
    {
        filterParameter.RequestorId = GlobalClass.CurrentUserAccount.EmployeeId;
        filterParameter.ActivityDateFrom = await globalService.LoadServerTime();

        if (userAccount.AccessLevel == Enums.AccessLevel.Client)
            auditTrails = await auditTrailService.GetAuditTrailsByEmployee(filterParameter, GlobalClass.Token);

        else if (userAccount.AccessLevel == Enums.AccessLevel.IT)
            auditTrails = await auditTrailService.GetAuditTrailsByIT(filterParameter, GlobalClass.Token);

        else
            auditTrails = await auditTrailService.GetAllAuditTrails(filterParameter, GlobalClass.Token);
      
        if (auditTrails.Count() > 0) isVisible = true;
        else isVisible = false;
        NotificationList();

        Task t = CheckAccountsCache();
        await t;
    }
    private void NotificationList()
    {
        foreach (var notify in notificationList)
        {
            if (!notifs.Any(x => x.Id == notify.Id))
                notifs.Add(notify);
        }
        badgeContent = notifs.Count();
    }

    private async Task LoadGlobaClassList()
    {
        Task t = Task.WhenAll(LoadITDepartment(),LoadTicketCategory(), LoadBranches(), 
        LoadAllDepartments(), LoadAllTicketStatus());
        await t;
    }

    private async Task LoadITDepartment()
    {
        FilterParameter _filterParameters = new FilterParameter();
        _filterParameters.DepartmentId = "8";
        GlobalList.ITDept = await globalService.GetDepartmentEmployees(_filterParameters, GlobalClass.Token);
    }

    private async Task LoadTicketCategory()
    {
        FilterParameter _filterParameters = new FilterParameter();
        GlobalList.ticketCategoryList = await ticketCategoryService.LoadTicketCategory(GlobalClass.Token);
        while (GlobalList.ticketCategoryList == null)
            await Task.Delay(1);
    }

    private async Task LoadBranches()
    {
        FilterParameter _filterParameters = new FilterParameter();
        GlobalList.TicketBranchList = await ticketBranchService.GetBranch(_filterParameters, GlobalClass.Token);
        GlobalList.TicketBranchList = GlobalList.TicketBranchList.OrderBy(x=>x.BranchName).ToList();
    }

    private async Task LoadAllDepartments() => GlobalList.DepartmentList = await globalService.GetAllDepartment(GlobalClass.Token);
    
    private async Task LoadAllTicketStatus()
    {
        FilterParameter _filterParameters = new FilterParameter();
        GlobalList.TicketStatusList = await TicketStatusService.GetTicketStatus(_filterParameters, GlobalClass.Token);
    }
    private async Task PopulateCatTypeList()
    {
        await Task.Run(() =>
        {
            foreach (Enums.TicketCategoryType item in Enum.GetValues(typeof(Enums.TicketCategoryType)))
            GlobalList.TicketCategoryTypeList.Add(item);
        });
    }
    

    void IDisposable.Dispose()
    {
        AppState.OnChange -= StateHasChanged;
        ApplicationState.OnChange -= StateHasChanged;
    }
    public void UpdateLayoutAlert()
    {
        Console.WriteLine("Invoked");
        if (AppState.IsDirty)
            updateStyleStr = "background-color: inherit";
        else
            updateStyleStr = "";
        StateHasChanged();
    }

    private async Task CheckSetNotifications()
    {
        ApplicationState.IsNotificationSilent = await NotificationMethods.CheckSilentSetting(localStorageService);
        var notifications = await NotificationMethods.GetNotificationsFromLocalStorage(localStorageService);
        if (notifications != null && notifications.Count() != 0)
            ApplicationState.Notifications = notifications;
        else
            await NotificationMethods.SetNotificationLocalStorage(localStorageService, new());
        StateHasChanged();
    }

    private async Task AddNotification(TicketModel ticket)
    {
        NotificationTrailModel notification = new()
        {
            EmployeeId = ticket.RequestorId,
            TicketNumber = ticket.TicketNumber,
            UserAccountName = ticket.RequestorName,
            LogDateTime = await globalService.LoadServerTime(),
            Activity = ticket.IssueSummary,
            TicketId = ticket.Id
        };
        var result = await NotificationMethods.GetNotificationsFromLocalStorage(localStorageService);
        result.Add(notification);
        ApplicationState.Notifications = result;
        await NotificationMethods.SetNotificationLocalStorage(localStorageService, result);
    }

    private async Task PlayNotificationSound()
    {
        ApplicationState.IsNotificationSilent = await NotificationMethods.CheckSilentSetting(localStorageService);
        if (!ApplicationState.IsNotificationSilent)
            await IJSrun.InvokeVoidAsync("PlayAudioFile", "/notificationSound/newTicket.wav");
    }
    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        await Extensions.SetDarkMode(localStorageService, _isDarkMode);
    }

    private async Task SetNotificationSetting(bool value) => await NotificationMethods.SetSilentNotification(localStorageService, value);
    private void RefreshPopUps()
    {
        _isNotifOpen = false;
    }

    private async Task ShowNotificationCard(TicketModel newTicket)
    {
        Task<UserAccount> getEmployeeTask = GetEmployeeAccount(newTicket.RequestorId);
        await getEmployeeTask;
        if (getEmployeeTask.Status == TaskStatus.RanToCompletion)
        {
            newTickets.Add(newTicket);
            Task AddNotifTask = AddNotification(newTicket);
            await AddNotifTask;
            if (AddNotifTask.Status == TaskStatus.RanToCompletion)
            {
                await PlayNotificationSound();
                NotificationMethods.ShowNotificationSnackbar(Snackbar, newTicket, NavigationManager, getEmployeeTask.Result, localStorageService);
            }
               
        }
        @* ShowAlert("New Ticket | Ticket number: " + newTicket.TicketNumber + " | Requestor: " + newTicket.RequestorName, Severity.Normal, 10); *@
      
    }

    private async Task<UserAccount> GetEmployeeAccount(long employeeId)
    {
        var requestor = await Task.Run(() => GlobalList.TemporaryEmployeeList.Where(x => x.EmployeeId == employeeId).FirstOrDefault()); 
        if (requestor != null)
            return requestor;
        else
        {
            requestor =  await globalService.GetEmployeeV2(GlobalClass.Token, employeeId);
            return requestor;
        }
    }

    public void NotifyChange()
    {
        badgeStyleString = "color:red";
        InvokeAsync(StateHasChanged);
    }
}