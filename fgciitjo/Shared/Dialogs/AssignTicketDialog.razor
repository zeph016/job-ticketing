@inject ITicketService ticketService;
@inject IGlobalService globalService;
@inject ITicketStatusService ticketStatusService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject ISnackbar Snackbar;

<MudDialog Class='custom-dialog1'>
  <TitleContent>
      <div class='d-flex align-center gap-2 custom-dialog1__title'>
        <MudIcon Class='mr-3' Icon="@Icons.Material.Filled.AssignmentTurnedIn" />
        <MudText Typo='Typo.h6'>@ContentText</MudText>
      </div>
  </TitleContent>
  <DialogContent>
    <div class='custom-dialog1__info transition-025s-ease'
        style='@(isDetailExpanded ? "max-height:552px":"max-height:155px;overflow:hidden")'>
        <TListDialogTInfoComp ExpandClickEvent='(() => isDetailExpanded = !isDetailExpanded)' currentTicket='currentTicket' />
    </div>
    <MudDivider Class='mt-2' />
    @if (!dataFetched)
    { 
      <MudSkeleton SkeletonType='SkeletonType.Text' Height='40px' Animation='Animation.Wave' />
    }
    else
    {
      <MudGrid Spacing='1'>
        <MudItem xs='8'>
          <MudSelect Class='inputs-12px' Label="IT Personnel" @bind-Value="@selectedEmployee" Dense Margin='Margin.Dense' Text='@selectedEmployee.EmployeeName'>
            @foreach (var item in listOfIT)
            {
              <MudSelectItem Value="@item">@item.EmployeeName</MudSelectItem>
            }
            </MudSelect>
        </MudItem>
        <MudItem xs='4'>
          <MudDatePicker Class='inputs-12px' @bind-Date="@currentTicket.AssignDate" PickerVariant='PickerVariant.Dialog' ReadOnly Label="Assign Date" MaxDate='DateTime.Now.Date'  
            Margin='Margin.Dense' IconSize='Size.Small' DisableToolbar />
        </MudItem>
      </MudGrid>
    }
  </DialogContent>
  <DialogActions>
    <div class='dialog-action'>
      <MudButton Class='btn-ios-d font12' OnClick='Cancel' Variant='Variant.Text' Size='Size.Small' DisableElevation>
        Cancel
      </MudButton>
      <MudButton Class='btn-ios-d font12' Color="@Color.Info" Variant="Variant.Filled" OnClick="Submit" Size='Size.Small' DisableElevation>
        @ButtonText
      </MudButton>
    </div>
  </DialogActions>
</MudDialog>

  @code {

  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();
  [Parameter] public TicketModel currentTicket { get; set; } = new TicketModel();
  [Parameter] public string ContentText { get; set; } = string.Empty;
  [Parameter] public string ButtonText { get; set; } = string.Empty;
  [Parameter] public Color Color { get; set; }
  private Employee selectedEmployee { get; set; } = new();
  private List<Employee> listOfIT = new List<Employee>();
  private List<TicketStatusModel> ticketStatusList = new List<TicketStatusModel>();
  private TicketStatusModel status = new TicketStatusModel();
  private TicketModel ticket = new TicketModel();
  private DateTime date,ticketDate = new DateTime();
  private Int64 statusId;
  string convertDate = string.Empty;
  bool dataFetched, isDetailExpanded = true;
  protected override async Task OnInitializedAsync()
  {
    Task<IEnumerable<Employee>> GetEmployeeListTask = GetAllEmployees();
    Task t = Task.WhenAll(GetEmployeeListTask,GetAllStatus());
    await t;
    if(t.Status == TaskStatus.RanToCompletion)
    {
      await GetCurrentStatus();
      listOfIT = GetEmployeeListTask.Result.ToList();
      SetCurrentUser();
      currentTicket.AssignDate = DateTime.Today;
      ConvertDate();
      CompletedFetch();
    }
  }
  private void CompletedFetch()
  {
      dataFetched = true;
      StateHasChanged();
  }
  void ShowAlert(string message, Severity severity)
  {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($"{message}", severity);
  }
  TicketModel MapProperties()
  {
    
    ticket.Id = currentTicket.Id;
    ticket.IsActive = currentTicket.IsActive;
    ticket.ControlCount = currentTicket.ControlCount;
    ticket.TicketNumber = currentTicket.TicketNumber;
    ticket.IssueSummary = currentTicket.IssueSummary;
    ticket.TaskDescription = currentTicket.TaskDescription;
    ticket.PriorityLevelId = currentTicket.PriorityLevelId;
    ticket.DocumentReference = currentTicket.DocumentReference;
    ticket.TicketCategoryId = currentTicket.TicketCategoryId;
    ticket.TicketCategoryName = currentTicket.TicketCategoryName;
    ticket.TicketBranchId = currentTicket.TicketBranchId;
    ticket.TicketBranchName = currentTicket.TicketBranchName;
    ticket.TicketStatusId = statusId;
    ticket.TicketStatusName = status.StatusName;
    ticket.Remarks = currentTicket.Remarks;
    ticket.AssignDate = currentTicket.AssignDate;
    ticket.AssigneeId = selectedEmployee.EmployeeId;

    ticket.UserId = GlobalClass.CurrentUserAccount.EmployeeId;
    ticket.TicketId = currentTicket.Id;
    var result = listOfIT.Where(x=>x.EmployeeId == selectedEmployee.EmployeeId).FirstOrDefault();
    if (result != null)
    {
       Employee assignee = result;
       ticket.Activity = "Assigned ticket to " + assignee.EmployeeName + ";Changed status: " + status.StatusName;
    }
    ticket.PCName = "";

    return ticket;
  }
  async Task Submit()
  {
    try
    {
      await ticketService.AssignTicket(MapProperties(), GlobalClass.Token);
      MudDialog.Close(DialogResult.Ok(true));
      ShowAlert("Ticket assigned", Severity.Success);
    }
    catch (System.Exception ex)
    {
       ShowAlert(ex.ToString(), Severity.Error);
    }
   
  }
  private void SetCurrentUser()
  {
    var result = listOfIT.Where(x=>x.EmployeeId == GlobalClass.CurrentUserAccount.EmployeeId).FirstOrDefault();
    if (result != null)
      selectedEmployee = result;
  }
  private async Task<IEnumerable<Employee>> GetAllEmployees()
  {
     var filterParameter = new FilterParameter()
     {
          IsName = false,
          Name = "",
          DepartmentId = "8"
      };
    listOfIT = await globalService.GetDepartmentEmployees(filterParameter, GlobalClass.Token);
    return listOfIT;
  }
  async Task<TicketStatusModel> GetCurrentStatus()
  {
    statusId = ticketStatusList.Where(x=>x.StatusTypeId == Enums.TicketStatusType.Assign).Select(x=>x.Id).FirstOrDefault();
    status = await ticketStatusService.GetTicketStatusById(statusId, GlobalClass.Token);
    return status;
  }
  private async Task<IEnumerable<TicketStatusModel>> GetAllStatus()
  {
    var filterParameter = new FilterParameter();
    @* ticketStatusList = await ticketStatusService.GetTicketStatus(filterParameter, GlobalClass.Token); *@
    ticketStatusList = await Task.Run(() => GlobalList.TicketStatusList.ToList());
    return ticketStatusList;
  }
  void ConvertDate()
  {
    if (currentTicket.TicketDate != null)
      ticketDate = Convert.ToDateTime(currentTicket.TicketDate);
    convertDate = ticketDate.ToString("MMM dd, yyyy");
  }
  private void Cancel() => MudDialog.Cancel();
}