@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ITicketBranchService ticketBranchService
@inject ISnackbar SnackbarService

<MudDialog Class='custom-dialog1'>
    <TitleContent>
        <div class='d-flex align-center gap-2 custom-dialog1__title'>
            @if (_action == Enums.CrudeMode.Edit)
            {
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
            }
            else if (_action == Enums.CrudeMode.Add)
            {
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" />
            }
            <MudText Typo='Typo.h6'>@ContentText</MudText>
        </div>
    </TitleContent>
    <DialogContent>
      <MudForm >
        <MudGrid>
            <MudItem xs='12'>
                <MudTextField @bind-Value='@currentBranch.BranchName' Error='notValid' Required='true' RequiredError='Branch name is required!'  Label='Branch Name' 
                    Margin='Margin.Dense'/>
            </MudItem>
        </MudGrid>
      </MudForm>
    </DialogContent>
    <DialogActions>
        @if (currentBranch.Id != 0)
        {
            <MudCheckBox @bind-Checked='@currentBranch.IsActive' Label='Active' Dense Color='Color.Dark' Size='Size.Small' />
        }
        <MudSpacer />
        <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text' Size='Size.Small' DisableElevation>Cancel</MudButton>
        <MudButton Class='btn-ios-d font12' OnClick="Submit" Variant="Variant.Filled" Size='Size.Small' DisableElevation
            Color="@(!currentBranch.IsActive ? Color.Error : @Color)">
            @(!currentBranch.IsActive ? "Deactivate" : @ButtonText)
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();
    [Parameter] public string ContentText { get; set; } = string.Empty;
    [Parameter] public string ButtonText { get; set; } = string.Empty;
    [Parameter] public Color Color { get; set; }
    [Parameter] public TicketBranchModel currentBranch { get; set; } = new TicketBranchModel();
    [Parameter] public Enums.CrudeMode _action { get; set; }
    bool notValid;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        while (GlobalClass.CurrentUserAccount == null)
            await Task.Delay(1);
        if (_action == Enums.CrudeMode.Add)
            currentBranch.IsActive = true;
    }
    private async void Submit()
    {
        if (!currentBranch.IsActive)
            _action = Enums.CrudeMode.Delete;
        if (!string.IsNullOrWhiteSpace(currentBranch.BranchName))
        {
            if (_action == Enums.CrudeMode.Add)
            {
                await ticketBranchService.AddBranch(currentBranch, GlobalClass.Token);
                Extensions.ShowAlert("Branch location has been added", Variant.Filled, SnackbarService, Severity.Success, string.Empty);
            }
            else if (_action == Enums.CrudeMode.Edit)
            {
                await ticketBranchService.UpdateBranch(currentBranch, GlobalClass.Token);
                Extensions.ShowAlert("Branch location has been updated", Variant.Filled, SnackbarService, Severity.Info, string.Empty);
            }
            else if (_action == Enums.CrudeMode.Delete)
            {
                await ticketBranchService.UpdateBranch(currentBranch, GlobalClass.Token);
                Extensions.ShowAlert("Branch location has been deactivated", Variant.Filled, SnackbarService, Severity.Warning, string.Empty);
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
          notValid = true;
        }
        
    }
        
    void Cancel()
    {
        Extensions.ShowAlert("Action Cancelled", Variant.Filled, SnackbarService, Severity.Normal, string.Empty);
        MudDialog.Cancel();
    }
}
