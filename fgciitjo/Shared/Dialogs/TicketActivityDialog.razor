@inject ITicketActivityService ticketActivityService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ISnackbar Snackbar
@inject ITicketStatusService ticketStatusService

<MudDialog>
    <TitleContent>
        <MudText Type='Typo.h6'>
            <p class='pAddTicketCategory'>
                <MudIcon Icon="@Icons.Material.Filled.LocalActivity" Size='Size.Large' />
                @ContentText
            </p>
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="3">
                <MudText Dense="true">Date</MudText>
            </MudItem>
            <MudItem xs='8'>
                <MudDatePicker PickerVariant="PickerVariant.Inline" @bind-Text="date" Margin="Margin.Dense" MinDate='@Convert.ToDateTime(minDate).Date'></MudDatePicker>
            </MudItem>
            <MudItem xs="3">
                <MudText Dense="true">Status</MudText>
            </MudItem>
            <MudItem xs='8'>
                @if (IsOtherActivity == false)
                {
                    @if (Id != 0)
                    {
                        <MudSelect @bind-Value="@ticketActivityModel.StatusId" Dense="true" >
                            @foreach (TicketStatusModel item in ticketStatusModels)
                                    {
                                <MudSelectItem Value="@item.Id">@item.StatusName</MudSelectItem>
                                    }
                        </MudSelect>
                    }
                    else
                    {
                        @if (readOnlyAdd == true)
                        {
                            <MudSelect @bind-Value="@ticketStatusID" Dense="true" ReadOnly='@readOnlyAdd' OpenIcon='None'>
                                @foreach (TicketStatusModel item in ticketStatusModels)
                                            {
                                    <MudSelectItem Value="@item.Id">@item.StatusName</MudSelectItem>
                                            }
                            </MudSelect>
                        }
                        else
                        {
                            <MudSelect @bind-Value="@ticketStatusID" Dense="true">
                                @foreach (TicketStatusModel item in ticketStatusModels)
                                            {
                                    <MudSelectItem Value="@item.Id">@item.StatusName</MudSelectItem>
                                            }
                            </MudSelect>
                        }
                    }
                }
                else
                {
                    @if (otherActivityId == 0)
                    {
                        <MudSelect @bind-Value="@ticketStatusID" Dense="true" OpenIcon='None'>
                            @foreach (TicketStatusModel item in ticketStatusModels)
                                    {
                                <MudSelectItem Value="@item.Id">@item.StatusName</MudSelectItem>
                                    }
                        </MudSelect>
                    }
                    else
                    {
                        <MudSelect @bind-Value="@ticketActivityModel.StatusId" Dense="true" OpenIcon='None'>
                            @foreach (TicketStatusModel item in ticketStatusModels)
                                    {
                                <MudSelectItem Value="@item.Id">@item.StatusName</MudSelectItem>
                                    }
                        </MudSelect>
                    }
                }
            </MudItem>
            <MudItem xs="3">
                <MudText Dense="true">Activity</MudText>
            </MudItem>
            <MudItem xs='9'>
                <MudTextField T="string" @bind-Value='@ticketActivityModel.ActivityName' Variant='Variant.Filled' Lines='3' id="textAcitivityDialog" />
            </MudItem>
            <MudItem xs="3">
                <MudText Dense="true">Remarks</MudText>
            </MudItem>
            <MudItem xs='9'>
                <MudTextField @bind-Value='@ticketActivityModel.Remarks' Variant='Variant.Filled' Lines='3' id="textAcitivityDialog" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick='Cancel' Variant='Variant.Text' Color='Color.Error'>Cancel</MudButton>
        <MudButton OnClick='Submit' Variant='Variant.Filled' Color='@Color'>@ButtonText</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string ContentText { get; set; }
    [Parameter] public string ButtonText { get; set; }
    [Parameter] public Color Color { get; set; }
    [Parameter] public long Id { get; set; }
    [Parameter] public long TicketId { get; set; }
    [Parameter] public long ticketStatusID { get; set; }
    [Parameter] public DateTime ticketdate { get; set; }
    [Parameter] public long otherActivityId { get; set; }
    [Parameter] public bool IsOtherActivity { get; set; }
    [Parameter] public Enums.TicketStatusType ticketStatusTypeId { get; set; }
    public TicketActivityModel ticketActivityModel = new TicketActivityModel();
    [Parameter] public Enums.CrudeMode _action { get; set; }
    private Enums.TicketCategoryType categoryType { get; set; }
    private bool isVisible, dataFetched, readOnlyupdate, readOnlyAdd;
    List<TicketStatusModel> ticketStatusModels = new List<TicketStatusModel>();
    TicketStatusModel ticketStatusModel { get; set; }
    string date;
    DateTime minDate;
    private MudTextField<string> multilineReference;

    protected override async Task OnInitializedAsync()
    {
        isVisible = true;
        dataFetched = false;
        Task t = Task.WhenAll(GetTicketStatus(), GetActivityById());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
        {
            if(IsOtherActivity == true)
                ticketStatusID = 2;
            if (ticketActivityModel.Id == 0)
            {
                date = DateTime.Now.ToShortDateString();
                minDate = ticketdate;
            }
            else
            {
                date = Convert.ToDateTime(ticketActivityModel.ActivityDate).ToShortDateString();
                readOnlyupdate = true;
                @* ticketStatusModel.Id = ticketActivityModel.StatusId;
                    ticketStatusModel.StatusName = ticketActivityModel.StatusName; *@
            }
            @* ticketStatus(); *@
            CompletedFetch();
        }
    }
    void CompletedFetch()
    {
        isVisible = false;
        dataFetched = true;
        StateHasChanged();
    }
    async Task GetActivityById()
    {
        if (otherActivityId != 0)
            Id = otherActivityId;
        if (Id != 0)
        {
            ticketActivityModel = await ticketActivityService.GetActivityById(Id, await localStorage.GetItemAsync<string>("token"));
        }
    }
    async Task GetTicketStatus()
    {
        await Task.Delay(50);
        var parameter = new FilterParameter();
        ticketStatusModels = await ticketStatusService.GetTicketStatus(parameter, await localStorage.GetItemAsync<string>("token"));
    }
    async void Submit()
    {
        if (ticketActivityModel.ActivityName == null)
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Configuration.MaxDisplayedSnackbars = 10;
            Snackbar.Add($" {"Activity is Required"}", Severity.Warning);
        }
        else
        {
            if (Validation() == true)
            {
                if (IsOtherActivity == false)
                {
                    if (ticketActivityModel.Id == 0)
                    {
                        MappTicketActivity();
                        ticketActivityModel.Activity = "Add Ticket Activity";
                        ticketActivityModel.StatusId = ticketStatusID;
                        await ticketActivityService.AddTicketActivity(ticketActivityModel, await localStorage.GetItemAsync<string>("token"));
                        ShowAlert("Ticket Activity Added", Variant.Filled);
                    }
                    else
                    {
                        MappTicketActivity();
                        ticketActivityModel.Id = ticketActivityModel.Id;
                        ticketActivityModel.Activity = "Update Ticket Activity";
                        ticketActivityModel.StatusId = ticketActivityModel.StatusId;
                        await ticketActivityService.UpdateTicketActivity(ticketActivityModel, await localStorage.GetItemAsync<string>("token"));
                        ShowAlert("Ticket Activity Updated", Variant.Filled);
                    }
                }
                else
                {
                    MappTicketActivity();
                    if (otherActivityId == 0)
                    {
                        ticketActivityModel.StatusId = ticketStatusID;
                        ticketActivityModel.TicketId = null;
                        await ticketActivityService.SaveTicketActivityWithoutTicket(ticketActivityModel, await localStorage.GetItemAsync<string>("token"));
                        ShowAlert("Other Ticket Activity Added", Variant.Filled);
                    }
                    else
                    {
                        ticketActivityModel.TicketId = null;
                        ticketActivityModel.Id = ticketActivityModel.Id;
                        ticketActivityModel.StatusId = ticketActivityModel.StatusId;
                        await ticketActivityService.UpdateTicketActivityWithoutTicket(ticketActivityModel, await localStorage.GetItemAsync<string>("token"));
                        ShowAlert("Other Ticket Activity Updated", Variant.Filled);
                    }
                }
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                Snackbar.Configuration.SnackbarVariant = Variant.Filled;
                Snackbar.Configuration.MaxDisplayedSnackbars = 10;
                Snackbar.Add($" {"Status Not Valid!"}", Severity.Warning);
            }
        }
    }
    void MappTicketActivity()
    {
        ticketActivityModel.UserId = GlobalClass.CurrentUserAccount.EmployeeId;
        ticketActivityModel.ActivityDate = Convert.ToDateTime(date);
        ticketActivityModel.IsActive = true;
        ticketActivityModel.TicketId = TicketId;
        ticketActivityModel.ActivityName = ticketActivityModel.ActivityName;
        ticketActivityModel.Remarks = ticketActivityModel.Remarks;
    }
    void Cancel()
    {
        MudDialog.Cancel();
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($"Cancelled action", Severity.Error);
    }
    void ShowAlert(string message, Variant variant)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.SnackbarVariant = variant;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($" {message}", Severity.Success);
    }
    void ticketStatus()
    {
        if (ticketStatusTypeId == Enums.TicketStatusType.None)
            readOnlyAdd = true;
        else if (ticketStatusTypeId == Enums.TicketStatusType.Assign)
            readOnlyAdd = true;
        else
            readOnlyAdd = false;
    }

    bool Validation()
    {
        if (ticketStatusTypeId == Enums.TicketStatusType.AllowUpdate)
        {
            //foreach (var item in ticketStatusModels)
            //{
            //    if (item.Id == ticketStatusID)
            //    {
            //        //if (item.StatusTypeId == Enums.TicketStatusType.None || item.StatusTypeId == Enums.TicketStatusType.Assign)
            //        //{
            //        //    return false;
            //        //}
            //        //else if (item.StatusTypeId == Enums.TicketStatusType.Complete)
            //        //    return false;
            //    }
            //}
        }
        return true;
    }
}