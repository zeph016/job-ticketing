@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IEmployeeAccountService employeeAccountService
@inject ITicketService ticketService
@inject ITicketCommentService ticketCommentService
@inject ITicketStatusService ticketStatusService
@inject IGlobalService globalService
@inject IConfiguration config
@inject IJSRuntime JSRuntime
@inject ISnackbar snackBarService

<MudDialog class='tinfodialog'>
    <DialogContent>
        @if (!isDataFetched)
        {
            <MudContainer>
                <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='30vh' Animation='Animation.Wave' />
            </MudContainer>
        }
        else
        {
            <MudContainer class='tinfodialog__tncontainer' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
                <MudIcon Icon="@Icons.Material.Filled.BugReport" Title="Issue Report" Size='Size.Medium' />
                <MudText Typo='Typo.h5'>
                    @currTicketInfo.TicketNumber
                </MudText>
            </MudContainer>
            <MudContainer Class='tinfodialog__dialogcont' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'
            style='@dialogContentStyleStr'>
                <MudContainer Class='tinfodialog__subcont'>
                    <div class='tinfodialog__txtissue-container'>
                        <MudIcon Icon='@Icons.Material.Filled.Create' Size='Size.Small' />
                        <MudText Class='tinfodialog__txtissue-l'>@currTicketInfo.IssueSummary</MudText>
                        <MudSpacer />
                        @* <MudButton OnClick='showComment' Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Chat">
                            @lblChatBtn</MudButton> *@
                        <MudBadge Content='commentCount' Color='Color.Error' Overlap='true' Bordered='true'>
                            <MudButton OnClick='showComment' EndIcon='@Icons.Material.Filled.Chat' Variant=" Variant.Text"
                            DisableElevation="true">@lblChatBtn
                            </MudButton>
                        </MudBadge>
                    </div>
                    <div class='tinfodialog__issuetags'>
                        @if (currTicketInfo.PriorityLevelId == Enums.PriorityLevel.Low)
                        {
                            <MudChip Color='Color.Info' Size='Size.Small'>Prority: @currTicketInfo.PriorityLevelId</MudChip>
                        }
                        @if (currTicketInfo.PriorityLevelId == Enums.PriorityLevel.Medium)
                        {
                            <MudChip Color='Color.Warning' Size='Size.Small'>Prority: @currTicketInfo.PriorityLevelId</MudChip>
                        }
                        @if (currTicketInfo.PriorityLevelId == Enums.PriorityLevel.High)
                        {
                            <MudChip Color='Color.Error' Size='Size.Small'>Prority: @currTicketInfo.PriorityLevelId</MudChip>
                        }
                        <MudChip Icon='@Icons.Material.Filled.FolderOpen' Size='Size.Small' style='@tChipCatNStyleStr'>
                            @currTicketInfo.TicketCategoryName</MudChip>
                        <MudChip Icon='@Icons.Material.Filled.LocationOn' Size='Size.Small'>@currTicketInfo.TicketBranchName
                        </MudChip>
                        <MudChip Icon='@Icons.Material.Filled.Apartment' Size='Size.Small' style='@tChipCatNStyleStr'>
                            @currTicketInfo.RequestorDepartment</MudChip>
                        <MudIcon Icon='@Icons.Material.Filled.LabelImportant' Size='Size.Medium' />
                        <MudSpacer />
                        <MudChip Size='Size.Small'>
                            @filesAttachedList.Count()
                            <MudMenu class='tinfodialog__attachmentmenu' Icon='@Icons.Material.Filled.Attachment'
                            Direction='Direction.End' Dense='true' OffsetY='true'>
                                <MudMenuItem Disabled='true'>
                                    Attached Files
                                </MudMenuItem>
                                <MudMenuItem>
                                    @if (filesAttachedList.Count() > 0)
                                    {
                                        @foreach (var file in filesAttachedList)
                                        {
                                            if (file.IsActive == true)
                                            {
                                                <p style='display: flex;'>
                                                    <MudIconButton OnClick='e => DownloadFile(file)' Icon='@Icons.Material.Filled.FileDownload' Size='Size.Small' />
                                                    <MudText class='ticketfileattachment__filename' @key='@file'>
                                                        @file.FileName
                                                    </MudText>
                                                </p>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <MudText>No files attached</MudText>
                                    }
                                </MudMenuItem>
                            </MudMenu>
                        </MudChip>
                        <MudChip Icon='@Icons.Material.Filled.DateRange' Size='Size.Small'>@currTicketInfo.DurationDay
                        </MudChip>
                        <MudChip Icon='@Icons.Material.Filled.Timer' Size='Size.Small'>@currTicketInfo.WorkingDay</MudChip>
                    </div>
                </MudContainer>

                <MudContainer Class='tinfodialog__subcont'>
                    <div class='tinfodialog__bodycont'>
                        <div class='tinfodialog__requestorcont'>
                            <div class='tinfodialog__avatarcontainer'>
                                <div class='tinfodialog__txtavatar'>
                                    <MudText>Requestor:</MudText>
                                </div>
                                @if (requestorAvatar != null)
                                {
                                    <MudChip>
                                        <MudAvatar class='reqavatar' Image="@requestorAvatarSource" />
                                        <MudText>@currTicketInfo.RequestorName</MudText>
                                    </MudChip>
                                }
                                else
                                {
                                    <MudChip class='reqavatar'>
                                        <MudAvatar Image="" />
                                        Error no requestor. Contact administrator
                                    </MudChip>
                                }
                            </div>
                            <MudSpacer />
                            <div class='tinfodialog__txtdate'>
                                @currentTimeDifferenceStr :
                                (@Convert.ToDateTime(currTicketInfo.TicketDate).ToString("MM/dd/yyyy hh:mm tt"))
                            </div>
                        </div>
                        <div class='tinfodialog__desccont'>
                            <MudTextField T='string' Text='@currTicketInfo.TaskDescription' Label="Description:" Variant="Variant.Text" Lines='10'
                            ReadOnly='true' DisableUnderLine='true' Adornment='Adornment.End'/>
                        </div>
                        <div class='tinfodialog__assigneecontainer'>
                            <div class='tinfodialog__txtstatus'>
                                <MudText>
                                    STATUS:
                                </MudText>
                                @foreach (var item in ticketStatusList)
                                {
                                    if (item.Id == currTicketInfo.TicketStatusId)
                                    {
                                        <MudChip style='@($"background-color:{item.StatusColor}; color: white;")'>
                                            @currTicketInfo.TicketStatusName</MudChip>
                                        break;
                                    }
                                }
                            </div>
                            <MudSpacer />
                            <MudIcon Icon='@Icons.Material.Filled.DoubleArrow' Size='Size.Medium' />
                            <MudText class='tinfodialog__txtavatar'>
                                <MudText>
                                    Assigned To:
                                </MudText>
                                @if (assigneeAvatar != null)
                                {
                                    <MudChip>
                                        <MudText>@currTicketInfo.AssigneeName</MudText>
                                        <MudAvatar class='assignavatar' Image="@assigneeAvatarSource" />
                                    </MudChip>
                                }
                                else
                                {
                                    <MudChip Label='true'>
                                        No IT assigned
                                        <MudAvatar class='assignavatar' Image="" />
                                    </MudChip>
                                }
                            </MudText>
                        </div>
                    </div>
                </MudContainer>

                <MudContainer Class='tinfodialog__subcont'>
                    <div class='tinfodialog__cont-btn-return'>
                        <MudButton Color="@Color" Variant="Variant.Filled" OnClick="Cancel">@ButtonText</MudButton>
                    </div>
                </MudContainer>

                <MudContainer Class='tinfodialog__subcont' style='@commentContStyleStr'>
                    <div class='comment-cont'>
                        <MudTable Id='comment-table' Class='comment-cont__conversation-cont speech-bubble' Items='@ticketComments'
                        Breakpoint='Breakpoint.Sm' Elevation='3'>
                            <RowTemplate>
                            @if (context.UserId != GlobalClass.CurrentUserAccount.EmployeeId)
                            {
                                <div class='d-flex align-end speech-bubble__bubble-cont speech-bubble__from-them'>
                                    <MudTooltip Text='@context.EmployeeName' Delay='1000'>
                                        <MudAvatar class="avatar" Color="Color.Info" Image='@ConvertImage(context.Picture)' />
                                    </MudTooltip>
                                    <p class="from-them">
                                        <MudTooltip Text='@Convert.ToDateTime(context.DateTimeLog).ToString("MM/dd/yyyy h:mmtt")'
                                        Delay='1000'>
                                        @context.Comment
                                           
                                        </MudTooltip>
                                    </p>
                                </div>
                            }
                            else
                            {
                                <div class='d-flex align-end speech-bubble__bubble-cont speech-bubble__from-me'>
                                    <p class="from-me">
                                        <MudTooltip Text='@Convert.ToDateTime(context.DateTimeLog).ToString("MM/dd/yyyy h:mmtt")'
                                        Delay='1000'>
                                            @context.Comment
                                        </MudTooltip>
                                    </p>
                                    <MudTooltip Text='@context.EmployeeName' Delay='1000'>
                                        <MudAvatar class="avatar" Color="Color.Info" Image='@ConvertImage(context.Picture)' />
                                    </MudTooltip>
                                </div>
                            }
                        </RowTemplate>
                    </MudTable>
                    <div class='comment-cont__chat-submit'>
                        <div class='commentcont__chat-submit-message'>
                            <MudTextField @bind-Value="@comment.Comment" Variant='Variant.Outlined'
                                Placeholder='Write a Comment' Lines='2'></MudTextField>
                        </div>
                        <div class='commentcont__chat-submit-btn'>
                            <MudButton OnClick="SendComment" Variant='Variant.Filled'
                                EndIcon='@Icons.Material.Filled.Send' Color='Color.Primary' Size='Size.Small'>SEND
                            </MudButton>
                        </div>
                    </div>
                </div>
            </MudContainer>
        </MudContainer>
        }
    </DialogContent>
    <DialogActions>
        @* <MudContainer class='tinfodialog__actionscontainer' MaxWidth='MaxWidth.ExtraExtraLarge'>
            <MudButton Color="@Color" Variant="Variant.Filled" OnClick="Cancel">@ButtonText</MudButton>
            </MudContainer> *@
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string ContentText { get; set; }
    [Parameter] public string ButtonText { get; set; }
    [Parameter] public Color Color { get; set; }
    [Parameter] public TicketModel currTicketInfo { get; set; }
    [Parameter] public string Token { get; set; }
    [Parameter] public bool FromNotif { get; set; }
    [Parameter] public List<TicketStatusModel> ticketStatusList { get; set; } = new List<TicketStatusModel>();
    private List<TicketFileAttachmentModel> filesAttachedList = new List<TicketFileAttachmentModel>();
    private List<TicketComment> ticketComments { get; set; } = new List<TicketComment>();
    private string imageConv = "data:image/png;base64, ", currentFileHashStr, requestorAvatarSource, assigneeAvatarSource,
    commentAvatarSource,
    commentContStyleStr = "display: none;", dialogContentStyleStr, lblChatBtn = "Open Comments", tChipCatNStyleStr;
    private UserAccount requestorAvatar = new UserAccount();
    private UserAccount assigneeAvatar = new UserAccount();
    private DateTime currentTimeDifference = new DateTime();
    private TicketComment comment = new TicketComment();
    private string currentTimeDifferenceStr { get; set; } = string.Empty;
    private bool isDataFetched, isCommentOpen;
    private HubConnection hubConnection;
    private TimeSpan seconds, minuteOne, minuteTwo, minutes, hourOne, hourTwo,
    hours, dayOne, dayTwo, weekOne, weekTwo, monthOne, monthTwo, monthYearOne, monthYearTwo;
    private int? commentCount;

    protected override async Task OnInitializedAsync()
    {
        if (FromNotif == true)
        {
            Task ti = Task.WhenAll(GetTicket());
            await ti;
        }

        Task t = Task.WhenAll(LoadComment(), LoadConnection(), GetRequestorAccount(), GetAssigneeAccount(), GetTimeDiff());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
        {
            if (FromNotif == true)
            {
                MapFilesAttached();
                CompletedFetch();
                await Task.Delay(50);
                await ScrollToBottom("comment-table");
            }
            else
            {
                MapFilesAttached();
                CompletedFetch();
                await Task.Delay(50);
                await ScrollToBottom("comment-table");
            }
        }
    }
    async Task ScrollToBottom(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("ScrollToBottomComment", elementId);
    }
    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel()
    {
        MudDialog.Cancel();
    }

    private void CompletedFetch()
    {
        isDataFetched = true;
        StateHasChanged();
    }
    private async Task LoadConnection()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(config["SignalRConnection"] + "ticketcommenthub")
        .WithAutomaticReconnect()
        .Build();
        await hubConnection.StartAsync();

        hubConnection.On<TicketComment>("ReceiveTicketComment", (_list) =>
        {
            ticketComments.Add(_list);
            comment.Comment = "";
            StateHasChanged();
            Task.Delay(1);
        });
    }
    private async Task SendComment()
    {
        TicketComment ticketComment = new TicketComment()
        {
            Token = await localStorage.GetItemAsync<string>("token"),
            TicketId = currTicketInfo.Id,
            DateTimeLog = DateTime.Now,
            UserId = GlobalClass.CurrentUserAccount.EmployeeId,
            IsActive = true,
            Comment = comment.Comment
        };
        if (!string.IsNullOrWhiteSpace(ticketComment.Comment))
            await hubConnection.InvokeAsync("ReceiveTicketComment", ticketComment);
        StateHasChanged();
        await Task.Delay(50);
        await ScrollToBottom("comment-table");
    }
    private async Task LoadComment()
    {
        comment.Token = await localStorage.GetItemAsync<string>("token");
        comment.TicketId = currTicketInfo.Id;
        ticketComments = await ticketCommentService.LoadTicketComments(comment);
        commentCount = CountComments();
    }

    private int CountComments()
    {
        var count = ticketComments.Where(x => x.TicketId == currTicketInfo.Id).ToList().Count();
        return count;
    }

    private string ConvertImage(byte[] commentAvatar)
    {
        string picture = "";
        if (commentAvatar != null)
            @* commentAvatarSource = imageConv + Convert.ToBase64String(commentAvatar.Picture); *@
            picture = imageConv + Convert.ToBase64String(commentAvatar);
        else
            picture = "";
        return picture;
    }
    private async Task GetRequestorAccount()
    {
        if (currTicketInfo.RequestorId > 0)
        {
            requestorAvatar = await employeeAccountService.GetEmployee(Token, currTicketInfo.RequestorId);
            requestorAvatarSource = imageConv + Convert.ToBase64String(requestorAvatar.Picture);
        }

    }
    private async Task GetAssigneeAccount()
    {
        if (currTicketInfo.AssigneeId > 0)
        {
            @* assigneeAvatar = await employeeAccountService.GetEmployee(Token, Convert.ToInt64(currTicketInfo.AssigneeId)); *@
            assigneeAvatar = await globalService.GetEmployeeV2(Token, Convert.ToInt64(currTicketInfo.AssigneeId));
            assigneeAvatarSource = imageConv + Convert.ToBase64String(assigneeAvatar.Picture);
        }
        else
        {
            assigneeAvatar = null;
        }
    }

    private async Task GetTicket()
    {
        currTicketInfo = await ticketService.GetTicketById(currTicketInfo.Id, Token);
    }
    private void MapFilesAttached()
    {
        string filesToHash = "";
        foreach (TicketFileAttachmentModel items in currTicketInfo.TicketFileAttachmentModels)
        {
            Console.WriteLine(items.FileName);
            filesToHash += items.FileName;
            if (items.IsActive)
            {
                filesAttachedList.Add(items);
            }
            using (SHA512 sha512Hash = SHA512.Create())
            {
                byte[] sourceBytes = Encoding.UTF8.GetBytes(filesToHash);
                byte[] hashBytes = sha512Hash.ComputeHash(sourceBytes);
                currentFileHashStr = BitConverter.ToString(hashBytes).Replace("-", String.Empty);
            }
        }
    }

    private async void DownloadFile(TicketFileAttachmentModel file)
    {
        string jpg = "data:image/jpeg;base64,",
        png = "data:image/png;base64,",
        pdf = "data:application/pdf;base64,",
        doc = "data:application/msword;base64,",
        docx = "data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,",
        xls = "data:application/vnd.ms-excel;base64,",
        xlsx = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,",
        contentType = "", fileName = file.FileName;
        if (file.FileName.Contains(".jpg") || file.FileName.Contains(".jpeg"))
            contentType = jpg + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".png"))
            contentType = png + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".pdf"))
            contentType = pdf + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".doc"))
            contentType = doc + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".docx"))
            contentType = docx + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".xls") || file.FileName.Contains(".csv"))
            contentType = xls + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".xlsx"))
            contentType = xlsx + Convert.ToBase64String(file.FileAttachment);
        await JSRuntime.InvokeAsync<object>("saveFile", fileName, contentType);
    }

    private async Task GetTimeDiff()
    {
        @* await Task.Delay(50); *@
        DateTime dateNow = GlobalContentTitle.contentServerTime;
        TimeSpan diff = dateNow - Convert.ToDateTime(currTicketInfo.TicketDate);
        seconds = new TimeSpan(0, 0, 59);
        minuteOne = new TimeSpan(0, 01, 0);
        minuteTwo = new TimeSpan(0, 02, 0);
        minutes = new TimeSpan(0, 59, 0);
        hourOne = new TimeSpan(1, 0, 0);
        hourTwo = new TimeSpan(2, 0, 0);
        dayOne = new TimeSpan(24, 0, 0);
        dayTwo = new TimeSpan(48, 0, 0);
        weekOne = new TimeSpan(168, 0, 0);
        weekTwo = new TimeSpan(336, 0, 0);
        monthOne = new TimeSpan(730, 0, 0);
        monthTwo = new TimeSpan(1460, 0, 0);
        monthYearOne = new TimeSpan(8760, 0, 0);
        monthYearTwo = new TimeSpan(17520, 0, 0);

        await Task.Run(() =>
        {
            if (diff <= seconds)
            {
                currentTimeDifferenceStr = "a moment ago";
                return;
            }
            else if (diff >= minuteOne && diff <= minuteTwo)
            {
                currentTimeDifferenceStr = "a minute ago";
                return;
            }
            else if (diff > minuteTwo && diff < minutes)
            {
                currentTimeDifferenceStr = $"{diff.Minutes} minutes ago";
                return;
            }
            else if (diff >= hourOne && diff <= hourTwo)
            {
                currentTimeDifferenceStr = $"{diff.Hours} hour ago";
                return;
            }
            else if (diff > hourTwo && diff < dayOne)
            {
                currentTimeDifferenceStr = $"{diff.Hours} hours ago";
                return;
            }
            else if (diff >= dayOne && diff < dayTwo)
            {
                currentTimeDifferenceStr = $"{diff.Days} day ago";
                return;
            }
            else if (diff > dayTwo && diff < weekOne)
            {
                currentTimeDifferenceStr = $"{diff.Days} days ago";
                return;
            }
            else if (diff >= weekOne && diff < weekTwo)
            {
                var week = diff / weekOne;
                currentTimeDifferenceStr = $"{Math.Round(week)} week ago";
                return;
            }
            else if (diff > weekTwo && diff < monthOne)
            {
                var weeksPassed = diff / weekOne;
                currentTimeDifferenceStr = $"{Math.Round(weeksPassed)} weeks ago";
                return;
            }
            else if (diff >= monthOne && diff < monthTwo)
            {
                var month = diff / monthOne;
                currentTimeDifferenceStr = $"{Math.Round(month)} month ago";
                return;
            }
            else if (diff >= monthTwo && diff < monthYearOne)
            {
                var months = diff / monthOne;
                currentTimeDifferenceStr = $"{Math.Round(months)} months ago";
                return;
            }
            else if (diff >= monthYearOne && diff < monthYearTwo)
            {
                var year = diff / monthYearOne;
                currentTimeDifferenceStr = $"{Math.Round(year)} year ago";
                return;
            }
            else if (diff > monthYearTwo)
            {
                var years = diff / monthYearOne;
                currentTimeDifferenceStr = $"{Math.Round(years)} years ago";
                return;
            }
        });
    }

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !string.IsNullOrWhiteSpace(comment.Comment))
            Task.Run(async () => await SendComment());
    }

    private async void showComment()
    {
        if (isCommentOpen)
        {
            isCommentOpen = false;
            commentContStyleStr = "display: none;";
            dialogContentStyleStr = "display: grid; grid-template-columns: 1fr; grid-template-rows: 0.2fr 1fr 0.1fr;";
            lblChatBtn = "Open Comments";
            tChipCatNStyleStr = "max-width: 100%; white-space: normal; overflow: hidden; text-overflow: ellipsis;";
            commentCount = CountComments();
        }
        else if (!isCommentOpen)
        {
            isCommentOpen = true;
            commentContStyleStr = "display: grid;";
            dialogContentStyleStr = "display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: 0.15fr 1fr 0.1fr;";
            lblChatBtn = "Close Comments";
            commentCount = null;
            tChipCatNStyleStr = "max-width: 100px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;";
            await Task.Delay(50);
            await ScrollToBottom("comment-table");
        }
    }

    private async Task CopyText(string text)
    {
        @* await JSRuntime.InvokeVoidAsync("copyTextToClipboard", text); *@
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", text);
        @* ShowAlert("Text copied to clipboard!", Variant.Filled); *@
    }

    private void ShowAlert(string message, Variant variant)
    {
        snackBarService.Clear();
        snackBarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        snackBarService.Configuration.SnackbarVariant = variant;
        snackBarService.Configuration.MaxDisplayedSnackbars = 10;
        snackBarService.Add($" {message}", Severity.Normal);
    }
}