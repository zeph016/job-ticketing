@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IEmployeeAccountService employeeAccountService
@inject ITicketService ticketService
@inject ITicketCommentService ticketCommentService
@inject ITicketStatusService ticketStatusService
@inject IGlobalService globalService
@inject IConfiguration config
@inject IJSRuntime JSRuntime
@inject ISnackbar snackBarService

<MudDialog class='custom-dialog1'>
    <TitleContent>
        <div class='d-flex align-center gap-2 custom-dialog1__title'>
            <MudIcon Icon="@Icons.Material.Filled.BugReport" Class="mr-3" />
            <MudText Typo='Typo.h6'>@currTicketInfo.TicketNumber</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <div class="d-flex align-start">
        @if (!isDataFetched)
        {
            <MudContainer>
                <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='30vh' Animation='Animation.Wave' />
            </MudContainer>
        }
        else
        {
            <MudGrid Spacing='1'>
                <MudItem xs=12>
                    <MudGrid Spacing='1'>
                        <MudItem Class='d-flex align-center gap-2' xs=12>
                            <MudTextField Class='txtinput-bold' @bind-Value='@currTicketInfo.IssueSummary' Label='Issue:' DisableUnderLine ReadOnly Margin='Margin.Dense' />
                            <MudSpacer />
                            <MudBadge Content='commentCount' Color='Color.Error' Overlap='true' Bordered='true'>
                                <MudButton OnClick='showComment' EndIcon='@Icons.Material.Filled.Chat' Variant=" Variant.Text"
                                    DisableElevation="true">@lblChatBtn
                                </MudButton>
                            </MudBadge>
                        </MudItem>
                        <MudItem Class='d-flex align-center' xs='12'>
                            <MudGrid Spacing='1'>
                                <MudItem Class='d-flex align-center justify-start overflow-auto pa-2' xs=8>
                                    <MudChip Class='color-white' Size='Size.Small' Color='@(currTicketInfo.PriorityLevelId == Enums.PriorityLevel.Low ? Color.Info : 
                                    (currTicketInfo.PriorityLevelId == Enums.PriorityLevel.Medium ? Color.Warning : 
                                    (currTicketInfo.PriorityLevelId == Enums.PriorityLevel.High ? Color.Warning :Color.Primary)))' >
                                    Prority: @currTicketInfo.PriorityLevelId
                                    </MudChip>
                                    <MudChip Icon='@Icons.Material.Filled.FolderOpen' Size='Size.Small' style='@tChipCatNStyleStr'>
                                        @currTicketInfo.TicketCategoryName</MudChip>
                                    <MudChip Icon='@Icons.Material.Filled.LocationOn' Size='Size.Small'>@currTicketInfo.TicketBranchName
                                    </MudChip>
                                    <MudChip Icon='@Icons.Material.Filled.Apartment' Size='Size.Small' style='@tChipCatNStyleStr'>
                                        @currTicketInfo.RequestorDepartment</MudChip>
                                    <MudIcon Icon='@Icons.Material.Filled.LabelImportant' Size='Size.Medium' />
                                </MudItem>
                                <MudItem Class='d-flex align-center justify-end overflow-auto pa-2' xs=4>
                                    <MudChip Icon='@Icons.Material.Filled.DateRange' Size='Size.Small'>@currTicketInfo.DurationDay
                                    </MudChip>
                                    <MudChip Icon='@Icons.Material.Filled.Timer' Size='Size.Small'>@currTicketInfo.WorkingDay</MudChip>
                                    <MudBadge Content='@(currTicketInfo.TicketFileAttachmentModels.Count())' Color="Color.Error" Overlap Visible='@(currTicketInfo.TicketFileAttachmentModels.Count() > 0 ? true : false)'>
                                        <MudButton Class='btn-ios-d font12' OnClick='(() => _isPopUpOpen = !_isPopUpOpen)' EndIcon='@Icons.Material.Filled.AttachFile' Size='Size.Small' 
                                            Color='Color.Tertiary' Variant='Variant.Filled' DisableElevation>
                                            Attachments
                                        </MudButton>
                                    </MudBadge>
                                    <MudPopover Open='_isPopUpOpen' Fixed AnchorOrigin='Origin.BottomRight' TransformOrigin='Origin.TopRight'>
                                        <FileAttachmentsComponent 
                                            CloseAttachmentPopOver='(() => _isPopUpOpen = !_isPopUpOpen)'
                                            FilesAttached='currTicketInfo.TicketFileAttachmentModels'/>
                                    </MudPopover>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem Class='d-flex align-center' xs='12'>
                            <MudText Typo='Typo.subtitle2'>Requestor:</MudText>
                            @if (requestorAvatar != null)
                            {
                                <MudChip Class='rounded'>
                                    <MudAvatar class='reqavatar' Image="@requestorAvatarSource" />
                                    <MudText Class='font12 font-bold ml-2'>@currTicketInfo.RequestorName</MudText>
                                </MudChip>
                            }
                            else
                            {
                                <MudChip Class='d-flex align-center gap-2 rounded'>
                                    <MudAvatar Class='mb-1 mt-1' Image='images/fglogo/fgci1-gs.png' />
                                    <MudText Class='font12 font-bold ml-2'>Error no requestor. Contact administrator</MudText>
                                </MudChip>
                            }
                            <MudSpacer />
                            <div>
                                @currentTimeDifferenceStr :
                                (@Convert.ToDateTime(currTicketInfo.TicketDate).ToString("MM/dd/yyyy hh:mm tt"))
                            </div>
                        </MudItem>
                        <MudItem xs='12'>
                            <MudPaper Class='bgc-whitesmoke pa-2' Elevation='0'>
                                <MudTextField Class='inputs-14px'  @bind-Value='@currTicketInfo.TaskDescription' Label="Task Description:" Variant="Variant.Text" Lines='11'
                                    ReadOnly DisableUnderLine Adornment='Adornment.End'/>
                            </MudPaper>
                        </MudItem>
                        <MudItem Class='d-flex align-center' xs=6> 
                            <MudText Typo='Typo.button'>STATUS:</MudText>
                            <MudChip Class='rounded' Size='Size.Small' Style='@(Extensions.GetColor(currTicketInfo.TicketStatusId))'>
                                @currTicketInfo.TicketStatusName
                            </MudChip>
                        </MudItem>
                        <MudItem Class='d-flex align-center justify-end' xs=6>
                            <MudIcon Icon='@Icons.Material.Filled.DoubleArrow' Size='Size.Medium' />
                            <MudText Typo='Typo.subtitle2'>Assigned To:</MudText>
                            @if (assignee.EmployeeId != 0)
                            {
                                <MudChip Class='rounded'>
                                    <MudAvatar Class='assignavatar' Image='@($"data:image/png;base64, {Convert.ToBase64String(@assignee.Picture)}")' Size='Size.Small'/>
                                    <MudText Class='font12 font-bold ml-2'>@currTicketInfo.AssigneeName</MudText>
                                </MudChip>
                            }
                            else
                            {
                                <MudChip Class='rounded'>
                                    <MudAvatar Class='mb-1 mt-1' Image='images/fglogo/fgci1-gs.png' />
                                    <MudText Class='font12 font-bold ml-2'>Not yet assigned</MudText> 
                                </MudChip>
                            }
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
            <div class='ml-4 transition-05s-ease @(isCommentOpen ? "fade-in" : "fade-out")' style='@(isCommentOpen ? "max-width:300px":"max-width:0px")'>
                <MudGrid Spacing='1'>
                    <MudItem xs=12>
                        <MudTable Id='comment-table' Class='comment-cont__conversation-cont speech-bubble' Items='@ticketComments'
                            Breakpoint='Breakpoint.Sm' Elevation='3' Height='360px' LoadingProgressColor='Color.Primary'>
                            <RowTemplate>
                                @if (context.UserId != GlobalClass.CurrentUserAccount.EmployeeId)
                                {
                                    <div class='d-flex align-end speech-bubble__bubble-cont speech-bubble__from-them'>
                                        <MudTooltip Text='@context.EmployeeName' Delay='1000'>
                                            <MudAvatar class="avatar" Color="Color.Info" Image='@ConvertImage(context.Picture)' />
                                        </MudTooltip>
                                        <p class="from-them">
                                            <MudTooltip Text='@Convert.ToDateTime(context.DateTimeLog).ToString("MM/dd/yyyy h:mmtt")'
                                            Delay='1000'>
                                            @context.Comment
                                            </MudTooltip>
                                        </p>
                                    </div>
                                }
                                else
                                {
                                    <div class='d-flex align-end speech-bubble__bubble-cont speech-bubble__from-me'>
                                        <p class="from-me">
                                            <MudTooltip Text='@Convert.ToDateTime(context.DateTimeLog).ToString("MM/dd/yyyy h:mmtt")'
                                            Delay='1000'>
                                                @context.Comment
                                            </MudTooltip>
                                        </p>
                                        <MudTooltip Text='@context.EmployeeName' Delay='1000'>
                                            <MudAvatar class="avatar" Color="Color.Info" Image='@ConvertImage(context.Picture)' />
                                        </MudTooltip>
                                    </div>
                                }
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                    <MudItem xs=12>
                        <div class='comment-cont__chat-submit'>
                            <div class='commentcont__chat-submit-message'>
                                <MudTextField @bind-Value="@comment.Comment" Variant='Variant.Outlined'
                                    Placeholder='Message' Margin='Margin.Dense' />
                            </div>
                            <div class='commentcont__chat-submit-btn'>
                                <MudButton Class='btn-ios-d font12' OnClick="SendComment" Variant='Variant.Filled'
                                    EndIcon='@Icons.Material.Filled.Send' Color='Color.Primary' Size='Size.Small' DisableElevation>SEND
                                </MudButton>
                            </div>
                        </div>
                    </MudItem>
                </MudGrid>
            </div>
        }
        </div>
    </DialogContent>
    <DialogActions>
         <MudButton Class='btn-ios-d font12' Color="@Color" Variant="Variant.Filled" OnClick="Cancel" Size='Size.Small' DisableElevation>@ButtonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();
    [Parameter] public string ButtonText { get; set; } = string.Empty;
    [Parameter] public Color Color { get; set; }
    [Parameter] public TicketModel currTicketInfo { get; set; } = new TicketModel();
    [Parameter] public string Token { get; set; } = string.Empty;
    [Parameter] public bool FromNotif { get; set; }
    [Parameter] public List<TicketStatusModel> ticketStatusList { get; set; } = new List<TicketStatusModel>();
    private List<TicketFileAttachmentModel> FilesAttachedList = new List<TicketFileAttachmentModel>();
    private List<TicketComment> ticketComments { get; set; } = new List<TicketComment>();
    private string imageConv = "data:image/png;base64, ", currentFileHashStr = string.Empty, requestorAvatarSource = string.Empty, 
    lblChatBtn = "Chat", tChipCatNStyleStr = string.Empty;
    private UserAccount requestorAvatar = new UserAccount();
    private UserAccount assignee = new UserAccount();
    private TicketComment comment = new TicketComment();
    private string currentTimeDifferenceStr { get; set; } = string.Empty;
    private bool isDataFetched, isCommentOpen, _isPopUpOpen;
    private HubConnection hubConnection = default!;
    private TimeSpan seconds, minuteOne, minuteTwo, minutes, hourOne, hourTwo,
    dayOne, dayTwo, weekOne, weekTwo, monthOne, monthOneTwo, monthTwo, monthYearOne, monthYearTwo;
    private int? commentCount;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }
    protected override async Task OnInitializedAsync()
    {
        
        Task ti = Task.WhenAll(GetTicket());
        await ti;
       
            Task t = Task.WhenAll(LoadComment(), LoadConnection(), GetRequestorAccount(), GetAssigneeAccount(), GetTimeDiff());
            await t;
            if (t.Status == TaskStatus.RanToCompletion)
            {
                if (FromNotif == true)
                {
                    MapFilesAttached();
                    CompletedFetch();
                    await Task.Delay(50);
                    await ScrollToBottom("comment-table");
                }
                else
                {
                    MapFilesAttached();
                    CompletedFetch();
                    await Task.Delay(50);
                    await ScrollToBottom("comment-table");
                }
            }
    }
    async Task ScrollToBottom(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("ScrollToBottomComment", elementId);
    }
    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel()
    {
        MudDialog.Cancel();
    }

    private void CompletedFetch()
    {
        isDataFetched = true;
        StateHasChanged();
    }
    private async Task LoadConnection()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(config["SignalRConnection"] + "ticketcommenthub")
        .WithAutomaticReconnect()
        .Build();
        await hubConnection.StartAsync();

        hubConnection.On<TicketComment>("ReceiveTicketComment", (_list) =>
        {
            ticketComments.Add(_list);
            comment.Comment = "";
            StateHasChanged();
            Task.Delay(1);
        });
    }
    private async Task SendComment()
    {
        TicketComment ticketComment = new TicketComment()
        {
            Token = await localStorage.GetItemAsync<string>("token"),
            TicketId = currTicketInfo.Id,
            DateTimeLog = DateTime.Now,
            UserId = GlobalClass.CurrentUserAccount.EmployeeId,
            IsActive = true,
            Comment = comment.Comment
        };
        if (!string.IsNullOrWhiteSpace(ticketComment.Comment))
            await hubConnection.InvokeAsync("ReceiveTicketComment", ticketComment);
        StateHasChanged();
        await Task.Delay(50);
        await ScrollToBottom("comment-table");
    }
    private async Task LoadComment()
    {
        comment.Token = await localStorage.GetItemAsync<string>("token");
        comment.TicketId = currTicketInfo.Id;
        ticketComments = await ticketCommentService.LoadTicketComments(comment);
        commentCount = CountComments();
    }

    private int CountComments()
    {
        var count = ticketComments.Where(x => x.TicketId == currTicketInfo.Id).ToList().Count();
        return count;
    }

    private string ConvertImage(byte[] commentAvatar)
    {
        string picture = "";
        if (commentAvatar != null)
            picture = imageConv + Convert.ToBase64String(commentAvatar);
        else
            picture = "";
        return picture;
    }
    private async Task GetRequestorAccount()
    {
        if (currTicketInfo.RequestorId > 0)
        {
            requestorAvatar = await employeeAccountService.GetEmployee(Token, currTicketInfo.RequestorId);
            requestorAvatarSource = imageConv + Convert.ToBase64String(requestorAvatar.Picture);
        }

    }
    private async Task GetAssigneeAccount()
    {
        if (currTicketInfo.AssigneeId > 0)
            assignee = await globalService.GetEmployeeV2(Token, Convert.ToInt64(currTicketInfo.AssigneeId));  
        else
            assignee = new UserAccount();
    }

    private async Task GetTicket()
    {
        var response = await ticketService.GetTicketById(currTicketInfo.Id, Token);
        if (response != null)
            currTicketInfo = response;
    }
    private void MapFilesAttached()
    {
        string filesToHash = "";
        foreach (TicketFileAttachmentModel items in currTicketInfo.TicketFileAttachmentModels)
        {
            filesToHash += items.FileName;
            if (items.IsActive)
            {
                FilesAttachedList.Add(items);
            }
            using (SHA512 sha512Hash = SHA512.Create())
            {
                byte[] sourceBytes = Encoding.UTF8.GetBytes(filesToHash);
                byte[] hashBytes = sha512Hash.ComputeHash(sourceBytes);
                currentFileHashStr = BitConverter.ToString(hashBytes).Replace("-", String.Empty);
            }
        }
    }

    private void DownloadFile(TicketFileAttachmentModel file)
    {
        string jpg = "data:image/jpeg;base64,",
        png = "data:image/png;base64,",
        pdf = "data:application/pdf;base64,",
        doc = "data:application/msword;base64,",
        docx = "data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,",
        xls = "data:application/vnd.ms-excel;base64,",
        xlsx = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,",
        contentType = "", fileName = file.FileName.ToLowerInvariant();
        Console.WriteLine(fileName);
        if (file.FileName.Contains(".jpg") || file.FileName.Contains(".jpeg"))
            contentType = jpg + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".png"))
            contentType = png + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".pdf"))
            contentType = pdf + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".doc"))
            contentType = doc + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".docx"))
            contentType = docx + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".xls") || file.FileName.Contains(".csv"))
            contentType = xls + Convert.ToBase64String(file.FileAttachment);
        if (file.FileName.Contains(".xlsx"))
            contentType = xlsx + Convert.ToBase64String(file.FileAttachment);
        @* await JSRuntime.InvokeAsync<object>("saveFile", fileName, contentType); *@
    }

    private async Task GetTimeDiff()
    {
        @* await Task.Delay(50); *@
        DateTime dateNow = GlobalContentTitle.contentServerTime;
        TimeSpan diff = dateNow - Convert.ToDateTime(currTicketInfo.TicketDate);
        seconds = new TimeSpan(0, 0, 59);
        minuteOne = new TimeSpan(0, 01, 0);
        minuteTwo = new TimeSpan(0, 02, 0);
        minutes = new TimeSpan(0, 59, 0);
        hourOne = new TimeSpan(1, 0, 0);
        hourTwo = new TimeSpan(2, 0, 0);
        dayOne = new TimeSpan(24, 0, 0);
        dayTwo = new TimeSpan(48, 0, 0);
        weekOne = new TimeSpan(168, 0, 0);
        weekTwo = new TimeSpan(336, 0, 0);
        monthOne = new TimeSpan(730, 0, 0);
        monthOneTwo = new TimeSpan(1095, 0, 0);
        monthTwo = new TimeSpan(1460, 0, 0);
        monthYearOne = new TimeSpan(8760, 0, 0);
        monthYearTwo = new TimeSpan(17520, 0, 0);

        await Task.Run(() =>
        {
            if (diff <= seconds)
            {
                currentTimeDifferenceStr = "a moment ago";
                return;
            }
            else if (diff >= minuteOne && diff <= minuteTwo)
            {
                currentTimeDifferenceStr = "a minute ago";
                return;
            }
            else if (diff > minuteTwo && diff < minutes)
            {
                currentTimeDifferenceStr = $"{diff.Minutes} minutes ago";
                return;
            }
            else if (diff >= hourOne && diff <= hourTwo)
            {
                currentTimeDifferenceStr = $"{diff.Hours} hour ago";
                return;
            }
            else if (diff > hourTwo && diff < dayOne)
            {
                currentTimeDifferenceStr = $"{diff.Hours} hours ago";
                return;
            }
            else if (diff >= dayOne && diff < dayTwo)
            {
                currentTimeDifferenceStr = $"{diff.Days} day ago";
                return;
            }
            else if (diff > dayTwo && diff < weekOne)
            {
                currentTimeDifferenceStr = $"{diff.Days} days ago";
                return;
            }
            else if (diff >= weekOne && diff < weekTwo)
            {
                var week = diff / weekOne;
                currentTimeDifferenceStr = $"{Math.Round(week)} week ago";
                return;
            }
            else if (diff > weekTwo && diff < monthOne)
            {
                var weeksPassed = diff / weekOne;
                currentTimeDifferenceStr = $"{Math.Round(weeksPassed)} weeks ago";
                return;
            }
            else if (diff >= monthOne && diff < monthOneTwo)
            {
                var month = diff / monthOne;
                currentTimeDifferenceStr = $"{Math.Round(month)} month ago";
                return;
            }
            else if (diff > monthOneTwo && diff < monthYearOne)
            {
                var months = diff / monthOne;
                currentTimeDifferenceStr = $"{Math.Round(months)} months ago";
                return;
            }
            else if (diff >= monthYearOne && diff < monthYearTwo)
            {
                var year = diff / monthYearOne;
                currentTimeDifferenceStr = $"{Math.Round(year)} year ago";
                return;
            }
            else if (diff > monthYearTwo)
            {
                var years = diff / monthYearOne;
                currentTimeDifferenceStr = $"{Math.Round(years)} years ago";
                return;
            }
        });
    }

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !string.IsNullOrWhiteSpace(comment.Comment))
            Task.Run(async () => await SendComment());
    }

    private async void showComment()
    {
        if (isCommentOpen)
        {
            isCommentOpen = false;
            lblChatBtn = "Chat";
            tChipCatNStyleStr = "max-width: 100%; white-space: normal; overflow: hidden; text-overflow: ellipsis;";
            commentCount = CountComments();
        }
        else if (!isCommentOpen)
        {
            isCommentOpen = true;
            lblChatBtn = "Close";
            commentCount = null;
            tChipCatNStyleStr = "max-width: 100px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;";
            await Task.Delay(50);
            await ScrollToBottom("comment-table");
        }
    }
}